
C:/Users/m252340/Desktop/School/EC463/Final/function_test.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 88 0f 00 00 8c 0f 00 00 90 0f 00 00     @...............
      30:	94 0f 00 00 84 0f 00 00 98 0f 00 00 9c 0f 00 00     ................

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000391 	bl	f20 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000010e0 	.word	0x000010e0

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000ebe38 	.word	0x000ebe38

00000124 <__cs3_heap_start_ptr>:
     124:	000ebe60 	.word	0x000ebe60

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000ebe40 	.word	0x000ebe40
     170:	000ebe43 	.word	0x000ebe43
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	000ebe40 	.word	0x000ebe40
     1bc:	000ebe40 	.word	0x000ebe40
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000ebe40 	.word	0x000ebe40
     200:	00000000 	.word	0x00000000
     204:	00001028 	.word	0x00001028

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001028 	.word	0x00001028
     250:	000ebe44 	.word	0x000ebe44
     254:	000010e0 	.word	0x000010e0
     258:	00000000 	.word	0x00000000

0000025c <max>:
  return digit;
}

//Return the index of the maximum array value
int max(int* arr, int len)
{
     25c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
  int max = arr[0],   // max value
     260:	e5904000 	ldr	r4, [r0]
      ret = 0;        // index of max value
  int i;
  for(i = 1; i < len; i++)
     264:	e3510001 	cmp	r1, #1
     268:	da00000a 	ble	298 <max+0x3c>
     26c:	e1a0c000 	mov	r12, r0
     270:	e3a03001 	mov	r3, #1

//Return the index of the maximum array value
int max(int* arr, int len)
{
  int max = arr[0],   // max value
      ret = 0;        // index of max value
     274:	e3a00000 	mov	r0, #0
  int i;
  for(i = 1; i < len; i++)
  {
    if(arr[i] > max)
     278:	e5bc2004 	ldr	r2, [r12, #4]!
     27c:	e1520004 	cmp	r2, r4
     280:	c1a00003 	movgt	r0, r3
    {
      max = arr[i];
     284:	c1a04002 	movgt	r4, r2
int max(int* arr, int len)
{
  int max = arr[0],   // max value
      ret = 0;        // index of max value
  int i;
  for(i = 1; i < len; i++)
     288:	e2833001 	add	r3, r3, #1
     28c:	e1530001 	cmp	r3, r1
     290:	1afffff8 	bne	278 <max+0x1c>
     294:	ea000000 	b	29c <max+0x40>

//Return the index of the maximum array value
int max(int* arr, int len)
{
  int max = arr[0],   // max value
      ret = 0;        // index of max value
     298:	e3a00000 	mov	r0, #0
      max = arr[i];
      ret = i;
    }
  }
  return ret;
}
     29c:	e8bd0010 	ldmfd	sp!, {r4}
     2a0:	e12fff1e 	bx	lr

000002a4 <classify>:
typedef char  (*img_type)[28];

int max(int*, int); //parameters are array of ints and length of array

int classify(img_type image)
{
     2a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     2a8:	e24dd05c 	sub	sp, sp, #92	; 0x5c
     2ac:	e1a0b000 	mov	r11, r0
  //Create array of 10 potential digits
  int output[10];
  //Initialize weights
  weight weights[10] = {weights0, weights1, weights2, weights3, weights4, weights5, weights6, weights7, weights8, weights9};
     2b0:	e28de008 	add	lr, sp, #8
     2b4:	e301c02c 	movw	r12, #4140	; 0x102c
     2b8:	e340c000 	movt	r12, #0
     2bc:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
     2c0:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     2c4:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
     2c8:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     2cc:	e89c0003 	ldm	r12, {r0, r1}
     2d0:	e88e0003 	stm	lr, {r0, r1}
     2d4:	e3a02000 	mov	r2, #0
     2d8:	e58d2004 	str	r2, [sp, #4]
    int sum = 0;
    for(j = 0; j < 28; j++)
    {
      for(k = 0; k < 28; k++)
      {
        sum += weights[i][j][k]*(float)image[j][k];
     2dc:	e1a09002 	mov	r9, r2
     2e0:	ea00001b 	b	354 <classify+0xb0>
     2e4:	eb000136 	bl	7c4 <__aeabi_i2f>
     2e8:	e1a06000 	mov	r6, r0
     2ec:	e7d70004 	ldrb	r0, [r7, r4]
     2f0:	eb000131 	bl	7bc <__aeabi_ui2f>
     2f4:	e5b51004 	ldr	r1, [r5, #4]!
     2f8:	eb000168 	bl	8a0 <__aeabi_fmul>
     2fc:	e1a01000 	mov	r1, r0
     300:	e1a00006 	mov	r0, r6
     304:	eb0000bd 	bl	600 <__addsf3>
     308:	eb000222 	bl	b98 <__aeabi_f2iz>
  for(i = 0; i < 10; i++)
  {
    int sum = 0;
    for(j = 0; j < 28; j++)
    {
      for(k = 0; k < 28; k++)
     30c:	e2844001 	add	r4, r4, #1
     310:	e354001c 	cmp	r4, #28
     314:	1afffff2 	bne	2e4 <classify+0x40>
     318:	e28aa070 	add	r10, r10, #112	; 0x70
     31c:	e288801c 	add	r8, r8, #28
  int i, j, k;
  //Perform linear classification and populate array
  for(i = 0; i < 10; i++)
  {
    int sum = 0;
    for(j = 0; j < 28; j++)
     320:	e3580e31 	cmp	r8, #784	; 0x310
     324:	0a000003 	beq	338 <classify+0x94>
typedef float (*weight)[28];
typedef char  (*img_type)[28];

int max(int*, int); //parameters are array of ints and length of array

int classify(img_type image)
     328:	e08b7008 	add	r7, r11, r8
     32c:	e24a5004 	sub	r5, r10, #4
     330:	e1a04009 	mov	r4, r9
     334:	eaffffea 	b	2e4 <classify+0x40>
      for(k = 0; k < 28; k++)
      {
        sum += weights[i][j][k]*(float)image[j][k];
      }
    }
    output[i] = sum;
     338:	e28d3030 	add	r3, sp, #48	; 0x30
     33c:	e59d2004 	ldr	r2, [sp, #4]
     340:	e7820003 	str	r0, [r2, r3]
     344:	e2822004 	add	r2, r2, #4
     348:	e58d2004 	str	r2, [sp, #4]
  int output[10];
  //Initialize weights
  weight weights[10] = {weights0, weights1, weights2, weights3, weights4, weights5, weights6, weights7, weights8, weights9};
  int i, j, k;
  //Perform linear classification and populate array
  for(i = 0; i < 10; i++)
     34c:	e3520028 	cmp	r2, #40	; 0x28
     350:	0a000005 	beq	36c <classify+0xc8>
     354:	e28d2008 	add	r2, sp, #8
     358:	e59d3004 	ldr	r3, [sp, #4]
     35c:	e793a002 	ldr	r10, [r3, r2]
    int sum = 0;
    for(j = 0; j < 28; j++)
    {
      for(k = 0; k < 28; k++)
      {
        sum += weights[i][j][k]*(float)image[j][k];
     360:	e1a08009 	mov	r8, r9
     364:	e1a00009 	mov	r0, r9
     368:	eaffffee 	b	328 <classify+0x84>
      }
    }
    output[i] = sum;
  }
  int digit = max(output,10);
     36c:	e28d0030 	add	r0, sp, #48	; 0x30
     370:	e3a0100a 	mov	r1, #10
     374:	ebffffb8 	bl	25c <max>
  return digit;
}
     378:	e28dd05c 	add	sp, sp, #92	; 0x5c
     37c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000380 <VGA_box>:
//   classifier

typedef short int (*vga_img)[320];

void VGA_box(int x1, int y1, int x2, int y2, short int p[][320])
{
     380:	e92d01f0 	push	{r4, r5, r6, r7, r8}
  int offset, row, col;
  short * pixel_buffer = (short *) FPGA_ONCHIP_BASE; // pixel buffer
  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     384:	e1510003 	cmp	r1, r3
     388:	ca000017 	bgt	3ec <VGA_box+0x6c>
// This file has the function to animate the loading screen for the digit
//   classifier

typedef short int (*vga_img)[320];

void VGA_box(int x1, int y1, int x2, int y2, short int p[][320])
     38c:	e0817101 	add	r7, r1, r1, lsl #2
     390:	e59dc014 	ldr	r12, [sp, #20]
     394:	e08c7387 	add	r7, r12, r7, lsl #7
{
  int offset, row, col;
  short * pixel_buffer = (short *) FPGA_ONCHIP_BASE; // pixel buffer
  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     398:	e1a06001 	mov	r6, r1
// This file has the function to animate the loading screen for the digit
//   classifier

typedef short int (*vga_img)[320];

void VGA_box(int x1, int y1, int x2, int y2, short int p[][320])
     39c:	e2408001 	sub	r8, r0, #1
     3a0:	e1a08088 	lsl	r8, r8, #1
     3a4:	ea000008 	b	3cc <VGA_box+0x4c>
  for (row = y1; row <= y2; row++)
  {
    for (col = x1; col <= x2; col++ )
    {
      offset = (row << 9) + col;
      *(pixel_buffer + offset) = (short)p[row][col];
     3a8:	e1f450b2 	ldrh	r5, [r4, #2]!
     3ac:	e1ec50b2 	strh	r5, [r12, #2]!
  int offset, row, col;
  short * pixel_buffer = (short *) FPGA_ONCHIP_BASE; // pixel buffer
  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
  {
    for (col = x1; col <= x2; col++ )
     3b0:	e2811001 	add	r1, r1, #1
     3b4:	e1520001 	cmp	r2, r1
     3b8:	aafffffa 	bge	3a8 <VGA_box+0x28>
void VGA_box(int x1, int y1, int x2, int y2, short int p[][320])
{
  int offset, row, col;
  short * pixel_buffer = (short *) FPGA_ONCHIP_BASE; // pixel buffer
  /* assume that the box coordinates are valid */
  for (row = y1; row <= y2; row++)
     3bc:	e2866001 	add	r6, r6, #1
     3c0:	e2877d0a 	add	r7, r7, #640	; 0x280
     3c4:	e1530006 	cmp	r3, r6
     3c8:	ba000007 	blt	3ec <VGA_box+0x6c>
  {
    for (col = x1; col <= x2; col++ )
     3cc:	e1500002 	cmp	r0, r2
     3d0:	cafffff9 	bgt	3bc <VGA_box+0x3c>
// This file has the function to animate the loading screen for the digit
//   classifier

typedef short int (*vga_img)[320];

void VGA_box(int x1, int y1, int x2, int y2, short int p[][320])
     3d4:	e0874008 	add	r4, r7, r8
     3d8:	e080c486 	add	r12, r0, r6, lsl #9
     3dc:	e1a0c08c 	lsl	r12, r12, #1
     3e0:	e24cc38e 	sub	r12, r12, #939524098	; 0x38000002
     3e4:	e1a01000 	mov	r1, r0
     3e8:	eaffffee 	b	3a8 <VGA_box+0x28>
    {
      offset = (row << 9) + col;
      *(pixel_buffer + offset) = (short)p[row][col];
    }
  }
}
     3ec:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     3f0:	e12fff1e 	bx	lr

000003f4 <loadscreen>:

void loadscreen(vga_img images[3])
{
     3f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     3f8:	e24dd00c 	sub	sp, sp, #12
     3fc:	e1a07000 	mov	r7, r0
  VGA_box(0,0,319,239,images[0]);
     400:	e5903000 	ldr	r3, [r0]
     404:	e58d3000 	str	r3, [sp]
     408:	e3a00000 	mov	r0, #0
     40c:	e1a01000 	mov	r1, r0
     410:	e300213f 	movw	r2, #319	; 0x13f
     414:	e3a030ef 	mov	r3, #239	; 0xef
     418:	ebffffd8 	bl	380 <VGA_box>
  int i;
  unsigned long j;
  for(i = 0; i < 10; i++)
     41c:	e3a04000 	mov	r4, #0
  {
    VGA_box(210,95,240,105,images[i%3]);
     420:	e3056556 	movw	r6, #21846	; 0x5556
     424:	e3456555 	movt	r6, #21845	; 0x5555
     428:	e3a090d2 	mov	r9, #210	; 0xd2
     42c:	e3a0a05f 	mov	r10, #95	; 0x5f
     430:	e3a080f0 	mov	r8, #240	; 0xf0
     434:	e3a05c65 	mov	r5, #25856	; 0x6500
     438:	e3415dcd 	movt	r5, #7629	; 0x1dcd
    if(i == 3)
      VGA_box(85, 120, 118 , 160, Load_Bar);
    if(i == 5)
      VGA_box(118, 120, 151 , 160, Load_Bar);
    if(i == 7)
      VGA_box(151, 120, 184 , 160, Load_Bar);
     43c:	e301b0e8 	movw	r11, #4328	; 0x10e8
     440:	e340b000 	movt	r11, #0
  VGA_box(0,0,319,239,images[0]);
  int i;
  unsigned long j;
  for(i = 0; i < 10; i++)
  {
    VGA_box(210,95,240,105,images[i%3]);
     444:	e0c32496 	smull	r2, r3, r6, r4
     448:	e0433fc4 	sub	r3, r3, r4, asr #31
     44c:	e0833083 	add	r3, r3, r3, lsl #1
     450:	e0633004 	rsb	r3, r3, r4
     454:	e7973103 	ldr	r3, [r7, r3, lsl #2]
     458:	e58d3000 	str	r3, [sp]
     45c:	e1a00009 	mov	r0, r9
     460:	e1a0100a 	mov	r1, r10
     464:	e1a02008 	mov	r2, r8
     468:	e3a03069 	mov	r3, #105	; 0x69
     46c:	ebffffc3 	bl	380 <VGA_box>
     470:	e1a03005 	mov	r3, r5
    for(j = 0; j < 500000000; j++)
     474:	e2533001 	subs	r3, r3, #1
     478:	1afffffd 	bne	474 <loadscreen+0x80>
      {}
    if(i == 1)
     47c:	e3540001 	cmp	r4, #1
     480:	1a000006 	bne	4a0 <loadscreen+0xac>
      VGA_box(50,120 ,85, 160, Load_Bar);
     484:	e58db000 	str	r11, [sp]
     488:	e3a00032 	mov	r0, #50	; 0x32
     48c:	e3a01078 	mov	r1, #120	; 0x78
     490:	e3a02055 	mov	r2, #85	; 0x55
     494:	e3a030a0 	mov	r3, #160	; 0xa0
     498:	ebffffb8 	bl	380 <VGA_box>
     49c:	ea000011 	b	4e8 <loadscreen+0xf4>
    if(i == 3)
     4a0:	e3540003 	cmp	r4, #3
     4a4:	1a000006 	bne	4c4 <loadscreen+0xd0>
      VGA_box(85, 120, 118 , 160, Load_Bar);
     4a8:	e58db000 	str	r11, [sp]
     4ac:	e3a00055 	mov	r0, #85	; 0x55
     4b0:	e3a01078 	mov	r1, #120	; 0x78
     4b4:	e3a02076 	mov	r2, #118	; 0x76
     4b8:	e3a030a0 	mov	r3, #160	; 0xa0
     4bc:	ebffffaf 	bl	380 <VGA_box>
     4c0:	ea000012 	b	510 <loadscreen+0x11c>
    if(i == 5)
     4c4:	e3540005 	cmp	r4, #5
     4c8:	1a000006 	bne	4e8 <loadscreen+0xf4>
      VGA_box(118, 120, 151 , 160, Load_Bar);
     4cc:	e58db000 	str	r11, [sp]
     4d0:	e3a00076 	mov	r0, #118	; 0x76
     4d4:	e3a01078 	mov	r1, #120	; 0x78
     4d8:	e3a02097 	mov	r2, #151	; 0x97
     4dc:	e3a030a0 	mov	r3, #160	; 0xa0
     4e0:	ebffffa6 	bl	380 <VGA_box>
     4e4:	ea000014 	b	53c <loadscreen+0x148>
    if(i == 7)
     4e8:	e3540007 	cmp	r4, #7
     4ec:	1a000007 	bne	510 <loadscreen+0x11c>
      VGA_box(151, 120, 184 , 160, Load_Bar);
     4f0:	e58db000 	str	r11, [sp]
     4f4:	e3a00097 	mov	r0, #151	; 0x97
     4f8:	e3a01078 	mov	r1, #120	; 0x78
     4fc:	e3a020b8 	mov	r2, #184	; 0xb8
     500:	e3a030a0 	mov	r3, #160	; 0xa0
     504:	ebffff9d 	bl	380 <VGA_box>
void loadscreen(vga_img images[3])
{
  VGA_box(0,0,319,239,images[0]);
  int i;
  unsigned long j;
  for(i = 0; i < 10; i++)
     508:	e2844001 	add	r4, r4, #1
     50c:	eaffffcc 	b	444 <loadscreen+0x50>
      VGA_box(85, 120, 118 , 160, Load_Bar);
    if(i == 5)
      VGA_box(118, 120, 151 , 160, Load_Bar);
    if(i == 7)
      VGA_box(151, 120, 184 , 160, Load_Bar);
    if(i == 9)
     510:	e3540009 	cmp	r4, #9
     514:	1a000008 	bne	53c <loadscreen+0x148>
      VGA_box(184, 120, 216 , 160, Load_Bar);
     518:	e30130e8 	movw	r3, #4328	; 0x10e8
     51c:	e3403000 	movt	r3, #0
     520:	e58d3000 	str	r3, [sp]
     524:	e3a000b8 	mov	r0, #184	; 0xb8
     528:	e3a01078 	mov	r1, #120	; 0x78
     52c:	e3a020d8 	mov	r2, #216	; 0xd8
     530:	e3a030a0 	mov	r3, #160	; 0xa0
     534:	ebffff91 	bl	380 <VGA_box>
     538:	ea000002 	b	548 <loadscreen+0x154>
void loadscreen(vga_img images[3])
{
  VGA_box(0,0,319,239,images[0]);
  int i;
  unsigned long j;
  for(i = 0; i < 10; i++)
     53c:	e2844001 	add	r4, r4, #1
     540:	e354000a 	cmp	r4, #10
     544:	1affffbe 	bne	444 <loadscreen+0x50>
    if(i == 7)
      VGA_box(151, 120, 184 , 160, Load_Bar);
    if(i == 9)
      VGA_box(184, 120, 216 , 160, Load_Bar);
  }
}
     548:	e28dd00c 	add	sp, sp, #12
     54c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000550 <main>:
#include "Image.h"
#include "classify.h"
#include "loading.h"

int main()
{
     550:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
     554:	e24dd044 	sub	sp, sp, #68	; 0x44
  //Create output source
  volatile int* KEY_ptr = KEY_BASE;
  volatile int* LED_ptr = LEDR_BASE;
  //Create array of 10 potential digits
  img_type img[10] = {Image1, Image2, Image3, Image4, Image5, Image6, Image7, Image8, Image9, Image10};
     558:	e301402c 	movw	r4, #4140	; 0x102c
     55c:	e3404000 	movt	r4, #0
     560:	e28dc018 	add	r12, sp, #24
     564:	e284e028 	add	lr, r4, #40	; 0x28
     568:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     56c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     570:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     574:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     578:	e89e0003 	ldm	lr, {r0, r1}
     57c:	e88c0003 	stm	r12, {r0, r1}
  vga_img imag[3] = {One_Dot,Two_Dot,Three_Dot};
     580:	e28d300c 	add	r3, sp, #12
     584:	e2844050 	add	r4, r4, #80	; 0x50
     588:	e8940007 	ldm	r4, {r0, r1, r2}
     58c:	e8830007 	stm	r3, {r0, r1, r2}
#include "address_map_arm.h"
#include "Image.h"
#include "classify.h"
#include "loading.h"

int main()
     590:	e28d5014 	add	r5, sp, #20
  img_type img[10] = {Image1, Image2, Image3, Image4, Image5, Image6, Image7, Image8, Image9, Image10};
  vga_img imag[3] = {One_Dot,Two_Dot,Three_Dot};
  int count = 0;
  while(1)
  {
    if((*(KEY_ptr + 0x3) & 0x8))
     594:	e3a04000 	mov	r4, #0
     598:	e34f4f20 	movt	r4, #65312	; 0xff20
    {
      loadscreen(imag);
      //Perform linear classification and populate array
      *(LED_ptr) = classify(img[count]);
      VGA_box(216,120,257,160, Load_Bar);
     59c:	e30160e8 	movw	r6, #4328	; 0x10e8
     5a0:	e3406000 	movt	r6, #0
     5a4:	e3a0a0d8 	mov	r10, #216	; 0xd8
     5a8:	e3a08078 	mov	r8, #120	; 0x78
     5ac:	e3007101 	movw	r7, #257	; 0x101
  img_type img[10] = {Image1, Image2, Image3, Image4, Image5, Image6, Image7, Image8, Image9, Image10};
  vga_img imag[3] = {One_Dot,Two_Dot,Three_Dot};
  int count = 0;
  while(1)
  {
    if((*(KEY_ptr + 0x3) & 0x8))
     5b0:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
     5b4:	e3130008 	tst	r3, #8
     5b8:	0afffffc 	beq	5b0 <main+0x60>
    {
      loadscreen(imag);
     5bc:	e28d000c 	add	r0, sp, #12
     5c0:	ebffff8b 	bl	3f4 <loadscreen>
      //Perform linear classification and populate array
      *(LED_ptr) = classify(img[count]);
     5c4:	e5b50004 	ldr	r0, [r5, #4]!
     5c8:	ebffff35 	bl	2a4 <classify>
     5cc:	e5840000 	str	r0, [r4]
      VGA_box(216,120,257,160, Load_Bar);
     5d0:	e58d6000 	str	r6, [sp]
     5d4:	e1a0000a 	mov	r0, r10
     5d8:	e1a01008 	mov	r1, r8
     5dc:	e1a02007 	mov	r2, r7
     5e0:	e3a030a0 	mov	r3, #160	; 0xa0
     5e4:	ebffff65 	bl	380 <VGA_box>
      count++;
      *(KEY_ptr+0x3) = 0x8;  //Clear edge detect register
     5e8:	e3a03008 	mov	r3, #8
     5ec:	e584305c 	str	r3, [r4, #92]	; 0x5c
     5f0:	eaffffee 	b	5b0 <main+0x60>

000005f4 <__aeabi_frsub>:
     5f4:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
     5f8:	ea000000 	b	600 <__addsf3>

000005fc <__aeabi_fsub>:
     5fc:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00000600 <__addsf3>:
     600:	e1b02080 	lsls	r2, r0, #1
     604:	11b03081 	lslsne	r3, r1, #1
     608:	11320003 	teqne	r2, r3
     60c:	11f0cc42 	mvnsne	r12, r2, asr #24
     610:	11f0cc43 	mvnsne	r12, r3, asr #24
     614:	0a000047 	beq	738 <__addsf3+0x138>
     618:	e1a02c22 	lsr	r2, r2, #24
     61c:	e0723c23 	rsbs	r3, r2, r3, lsr #24
     620:	c0822003 	addgt	r2, r2, r3
     624:	c0201001 	eorgt	r1, r0, r1
     628:	c0210000 	eorgt	r0, r1, r0
     62c:	c0201001 	eorgt	r1, r0, r1
     630:	b2633000 	rsblt	r3, r3, #0
     634:	e3530019 	cmp	r3, #25
     638:	812fff1e 	bxhi	lr
     63c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
     640:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     644:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
     648:	12600000 	rsbne	r0, r0, #0
     64c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
     650:	e3811502 	orr	r1, r1, #8388608	; 0x800000
     654:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
     658:	12611000 	rsbne	r1, r1, #0
     65c:	e1320003 	teq	r2, r3
     660:	0a00002e 	beq	720 <__addsf3+0x120>
     664:	e2422001 	sub	r2, r2, #1
     668:	e0900351 	adds	r0, r0, r1, asr r3
     66c:	e2633020 	rsb	r3, r3, #32
     670:	e1a01311 	lsl	r1, r1, r3
     674:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
     678:	5a000001 	bpl	684 <__addsf3+0x84>
     67c:	e2711000 	rsbs	r1, r1, #0
     680:	e2e00000 	rsc	r0, r0, #0
     684:	e3500502 	cmp	r0, #8388608	; 0x800000
     688:	3a00000b 	bcc	6bc <__addsf3+0xbc>
     68c:	e3500401 	cmp	r0, #16777216	; 0x1000000
     690:	3a000004 	bcc	6a8 <__addsf3+0xa8>
     694:	e1b000a0 	lsrs	r0, r0, #1
     698:	e1a01061 	rrx	r1, r1
     69c:	e2822001 	add	r2, r2, #1
     6a0:	e35200fe 	cmp	r2, #254	; 0xfe
     6a4:	2a000038 	bcs	78c <__addsf3+0x18c>
     6a8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
     6ac:	e0a00b82 	adc	r0, r0, r2, lsl #23
     6b0:	03c00001 	biceq	r0, r0, #1
     6b4:	e1800003 	orr	r0, r0, r3
     6b8:	e12fff1e 	bx	lr
     6bc:	e1b01081 	lsls	r1, r1, #1
     6c0:	e0a00000 	adc	r0, r0, r0
     6c4:	e3100502 	tst	r0, #8388608	; 0x800000
     6c8:	e2422001 	sub	r2, r2, #1
     6cc:	1afffff5 	bne	6a8 <__addsf3+0xa8>
     6d0:	e1b0c620 	lsrs	r12, r0, #12
     6d4:	01a00600 	lsleq	r0, r0, #12
     6d8:	0242200c 	subeq	r2, r2, #12
     6dc:	e31008ff 	tst	r0, #16711680	; 0xff0000
     6e0:	01a00400 	lsleq	r0, r0, #8
     6e4:	02422008 	subeq	r2, r2, #8
     6e8:	e310060f 	tst	r0, #15728640	; 0xf00000
     6ec:	01a00200 	lsleq	r0, r0, #4
     6f0:	02422004 	subeq	r2, r2, #4
     6f4:	e3100503 	tst	r0, #12582912	; 0xc00000
     6f8:	01a00100 	lsleq	r0, r0, #2
     6fc:	02422002 	subeq	r2, r2, #2
     700:	e3500502 	cmp	r0, #8388608	; 0x800000
     704:	31a00080 	lslcc	r0, r0, #1
     708:	e2d22000 	sbcs	r2, r2, #0
     70c:	a0800b82 	addge	r0, r0, r2, lsl #23
     710:	b2622000 	rsblt	r2, r2, #0
     714:	a1800003 	orrge	r0, r0, r3
     718:	b1830230 	orrlt	r0, r3, r0, lsr r2
     71c:	e12fff1e 	bx	lr
     720:	e3320000 	teq	r2, #0
     724:	e2211502 	eor	r1, r1, #8388608	; 0x800000
     728:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
     72c:	02822001 	addeq	r2, r2, #1
     730:	12433001 	subne	r3, r3, #1
     734:	eaffffca 	b	664 <__addsf3+0x64>
     738:	e1a03081 	lsl	r3, r1, #1
     73c:	e1f0cc42 	mvns	r12, r2, asr #24
     740:	11f0cc43 	mvnsne	r12, r3, asr #24
     744:	0a000013 	beq	798 <__addsf3+0x198>
     748:	e1320003 	teq	r2, r3
     74c:	0a000002 	beq	75c <__addsf3+0x15c>
     750:	e3320000 	teq	r2, #0
     754:	01a00001 	moveq	r0, r1
     758:	e12fff1e 	bx	lr
     75c:	e1300001 	teq	r0, r1
     760:	13a00000 	movne	r0, #0
     764:	112fff1e 	bxne	lr
     768:	e31204ff 	tst	r2, #-16777216	; 0xff000000
     76c:	1a000002 	bne	77c <__addsf3+0x17c>
     770:	e1b00080 	lsls	r0, r0, #1
     774:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
     778:	e12fff1e 	bx	lr
     77c:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
     780:	32800502 	addcc	r0, r0, #8388608	; 0x800000
     784:	312fff1e 	bxcc	lr
     788:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
     78c:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
     790:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     794:	e12fff1e 	bx	lr
     798:	e1f02c42 	mvns	r2, r2, asr #24
     79c:	11a00001 	movne	r0, r1
     7a0:	01f03c43 	mvnseq	r3, r3, asr #24
     7a4:	11a01000 	movne	r1, r0
     7a8:	e1b02480 	lsls	r2, r0, #9
     7ac:	01b03481 	lslseq	r3, r1, #9
     7b0:	01300001 	teqeq	r0, r1
     7b4:	13800501 	orrne	r0, r0, #4194304	; 0x400000
     7b8:	e12fff1e 	bx	lr

000007bc <__aeabi_ui2f>:
     7bc:	e3a03000 	mov	r3, #0
     7c0:	ea000001 	b	7cc <__aeabi_i2f+0x8>

000007c4 <__aeabi_i2f>:
     7c4:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
     7c8:	42600000 	rsbmi	r0, r0, #0
     7cc:	e1b0c000 	movs	r12, r0
     7d0:	012fff1e 	bxeq	lr
     7d4:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
     7d8:	e1a01000 	mov	r1, r0
     7dc:	e3a00000 	mov	r0, #0
     7e0:	ea00000f 	b	824 <__aeabi_l2f+0x30>

000007e4 <__aeabi_ul2f>:
     7e4:	e1902001 	orrs	r2, r0, r1
     7e8:	012fff1e 	bxeq	lr
     7ec:	e3a03000 	mov	r3, #0
     7f0:	ea000005 	b	80c <__aeabi_l2f+0x18>

000007f4 <__aeabi_l2f>:
     7f4:	e1902001 	orrs	r2, r0, r1
     7f8:	012fff1e 	bxeq	lr
     7fc:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
     800:	5a000001 	bpl	80c <__aeabi_l2f+0x18>
     804:	e2700000 	rsbs	r0, r0, #0
     808:	e2e11000 	rsc	r1, r1, #0
     80c:	e1b0c001 	movs	r12, r1
     810:	01a0c000 	moveq	r12, r0
     814:	01a01000 	moveq	r1, r0
     818:	03a00000 	moveq	r0, #0
     81c:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
     820:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
     824:	e2433502 	sub	r3, r3, #8388608	; 0x800000
     828:	e3a02017 	mov	r2, #23
     82c:	e35c0801 	cmp	r12, #65536	; 0x10000
     830:	21a0c82c 	lsrcs	r12, r12, #16
     834:	22422010 	subcs	r2, r2, #16
     838:	e35c0c01 	cmp	r12, #256	; 0x100
     83c:	21a0c42c 	lsrcs	r12, r12, #8
     840:	22422008 	subcs	r2, r2, #8
     844:	e35c0010 	cmp	r12, #16
     848:	21a0c22c 	lsrcs	r12, r12, #4
     84c:	22422004 	subcs	r2, r2, #4
     850:	e35c0004 	cmp	r12, #4
     854:	22422002 	subcs	r2, r2, #2
     858:	304220ac 	subcc	r2, r2, r12, lsr #1
     85c:	e05221ac 	subs	r2, r2, r12, lsr #3
     860:	e0433b82 	sub	r3, r3, r2, lsl #23
     864:	ba000006 	blt	884 <__aeabi_l2f+0x90>
     868:	e0833211 	add	r3, r3, r1, lsl r2
     86c:	e1a0c210 	lsl	r12, r0, r2
     870:	e2622020 	rsb	r2, r2, #32
     874:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
     878:	e0a30230 	adc	r0, r3, r0, lsr r2
     87c:	03c00001 	biceq	r0, r0, #1
     880:	e12fff1e 	bx	lr
     884:	e2822020 	add	r2, r2, #32
     888:	e1a0c211 	lsl	r12, r1, r2
     88c:	e2622020 	rsb	r2, r2, #32
     890:	e190008c 	orrs	r0, r0, r12, lsl #1
     894:	e0a30231 	adc	r0, r3, r1, lsr r2
     898:	01c00fac 	biceq	r0, r0, r12, lsr #31
     89c:	e12fff1e 	bx	lr

000008a0 <__aeabi_fmul>:
     8a0:	e3a0c0ff 	mov	r12, #255	; 0xff
     8a4:	e01c2ba0 	ands	r2, r12, r0, lsr #23
     8a8:	101c3ba1 	andsne	r3, r12, r1, lsr #23
     8ac:	1132000c 	teqne	r2, r12
     8b0:	1133000c 	teqne	r3, r12
     8b4:	0a00003e 	beq	9b4 <__aeabi_fmul+0x114>
     8b8:	e0822003 	add	r2, r2, r3
     8bc:	e020c001 	eor	r12, r0, r1
     8c0:	e1b00480 	lsls	r0, r0, #9
     8c4:	11b01481 	lslsne	r1, r1, #9
     8c8:	0a000010 	beq	910 <__aeabi_fmul+0x70>
     8cc:	e3a03302 	mov	r3, #134217728	; 0x8000000
     8d0:	e18302a0 	orr	r0, r3, r0, lsr #5
     8d4:	e18312a1 	orr	r1, r3, r1, lsr #5
     8d8:	e0813190 	umull	r3, r1, r0, r1
     8dc:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
     8e0:	e3510502 	cmp	r1, #8388608	; 0x800000
     8e4:	31a01081 	lslcc	r1, r1, #1
     8e8:	31811fa3 	orrcc	r1, r1, r3, lsr #31
     8ec:	31a03083 	lslcc	r3, r3, #1
     8f0:	e1800001 	orr	r0, r0, r1
     8f4:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
     8f8:	e35200fd 	cmp	r2, #253	; 0xfd
     8fc:	8a00000f 	bhi	940 <__aeabi_fmul+0xa0>
     900:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
     904:	e0a00b82 	adc	r0, r0, r2, lsl #23
     908:	03c00001 	biceq	r0, r0, #1
     90c:	e12fff1e 	bx	lr
     910:	e3300000 	teq	r0, #0
     914:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
     918:	01a01481 	lsleq	r1, r1, #9
     91c:	e18c04a0 	orr	r0, r12, r0, lsr #9
     920:	e18004a1 	orr	r0, r0, r1, lsr #9
     924:	e252207f 	subs	r2, r2, #127	; 0x7f
     928:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
     92c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
     930:	c12fff1e 	bxgt	lr
     934:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     938:	e3a03000 	mov	r3, #0
     93c:	e2522001 	subs	r2, r2, #1
     940:	ca000035 	bgt	a1c <__aeabi_fmul+0x17c>
     944:	e3720019 	cmn	r2, #25
     948:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
     94c:	d12fff1e 	bxle	lr
     950:	e2622000 	rsb	r2, r2, #0
     954:	e1b01080 	lsls	r1, r0, #1
     958:	e1a01231 	lsr	r1, r1, r2
     95c:	e2622020 	rsb	r2, r2, #32
     960:	e1a0c210 	lsl	r12, r0, r2
     964:	e1b00061 	rrxs	r0, r1
     968:	e2a00000 	adc	r0, r0, #0
     96c:	e193308c 	orrs	r3, r3, r12, lsl #1
     970:	01c00fac 	biceq	r0, r0, r12, lsr #31
     974:	e12fff1e 	bx	lr
     978:	e3320000 	teq	r2, #0
     97c:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
     980:	01a00080 	lsleq	r0, r0, #1
     984:	03100502 	tsteq	r0, #8388608	; 0x800000
     988:	02422001 	subeq	r2, r2, #1
     98c:	0afffffb 	beq	980 <__aeabi_fmul+0xe0>
     990:	e180000c 	orr	r0, r0, r12
     994:	e3330000 	teq	r3, #0
     998:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
     99c:	01a01081 	lsleq	r1, r1, #1
     9a0:	03110502 	tsteq	r1, #8388608	; 0x800000
     9a4:	02433001 	subeq	r3, r3, #1
     9a8:	0afffffb 	beq	99c <__aeabi_fmul+0xfc>
     9ac:	e181100c 	orr	r1, r1, r12
     9b0:	eaffffc0 	b	8b8 <__aeabi_fmul+0x18>
     9b4:	e00c3ba1 	and	r3, r12, r1, lsr #23
     9b8:	e132000c 	teq	r2, r12
     9bc:	1133000c 	teqne	r3, r12
     9c0:	0a000005 	beq	9dc <__aeabi_fmul+0x13c>
     9c4:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
     9c8:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
     9cc:	1affffe9 	bne	978 <__aeabi_fmul+0xd8>
     9d0:	e0200001 	eor	r0, r0, r1
     9d4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
     9d8:	e12fff1e 	bx	lr
     9dc:	e3300000 	teq	r0, #0
     9e0:	13300102 	teqne	r0, #-2147483648	; 0x80000000
     9e4:	01a00001 	moveq	r0, r1
     9e8:	13310000 	teqne	r1, #0
     9ec:	13310102 	teqne	r1, #-2147483648	; 0x80000000
     9f0:	0a00000d 	beq	a2c <__aeabi_fmul+0x18c>
     9f4:	e132000c 	teq	r2, r12
     9f8:	1a000001 	bne	a04 <__aeabi_fmul+0x164>
     9fc:	e1b02480 	lsls	r2, r0, #9
     a00:	1a000009 	bne	a2c <__aeabi_fmul+0x18c>
     a04:	e133000c 	teq	r3, r12
     a08:	1a000002 	bne	a18 <__aeabi_fmul+0x178>
     a0c:	e1b03481 	lsls	r3, r1, #9
     a10:	11a00001 	movne	r0, r1
     a14:	1a000004 	bne	a2c <__aeabi_fmul+0x18c>
     a18:	e0200001 	eor	r0, r0, r1
     a1c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
     a20:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
     a24:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     a28:	e12fff1e 	bx	lr
     a2c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
     a30:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
     a34:	e12fff1e 	bx	lr

00000a38 <__aeabi_fdiv>:
     a38:	e3a0c0ff 	mov	r12, #255	; 0xff
     a3c:	e01c2ba0 	ands	r2, r12, r0, lsr #23
     a40:	101c3ba1 	andsne	r3, r12, r1, lsr #23
     a44:	1132000c 	teqne	r2, r12
     a48:	1133000c 	teqne	r3, r12
     a4c:	0a00003a 	beq	b3c <__aeabi_fdiv+0x104>
     a50:	e0422003 	sub	r2, r2, r3
     a54:	e020c001 	eor	r12, r0, r1
     a58:	e1b01481 	lsls	r1, r1, #9
     a5c:	e1a00480 	lsl	r0, r0, #9
     a60:	0a00001c 	beq	ad8 <__aeabi_fdiv+0xa0>
     a64:	e3a03201 	mov	r3, #268435456	; 0x10000000
     a68:	e1831221 	orr	r1, r3, r1, lsr #4
     a6c:	e1833220 	orr	r3, r3, r0, lsr #4
     a70:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
     a74:	e1530001 	cmp	r3, r1
     a78:	31a03083 	lslcc	r3, r3, #1
     a7c:	e2a2207d 	adc	r2, r2, #125	; 0x7d
     a80:	e3a0c502 	mov	r12, #8388608	; 0x800000
     a84:	e1530001 	cmp	r3, r1
     a88:	20433001 	subcs	r3, r3, r1
     a8c:	2180000c 	orrcs	r0, r0, r12
     a90:	e15300a1 	cmp	r3, r1, lsr #1
     a94:	204330a1 	subcs	r3, r3, r1, lsr #1
     a98:	218000ac 	orrcs	r0, r0, r12, lsr #1
     a9c:	e1530121 	cmp	r3, r1, lsr #2
     aa0:	20433121 	subcs	r3, r3, r1, lsr #2
     aa4:	2180012c 	orrcs	r0, r0, r12, lsr #2
     aa8:	e15301a1 	cmp	r3, r1, lsr #3
     aac:	204331a1 	subcs	r3, r3, r1, lsr #3
     ab0:	218001ac 	orrcs	r0, r0, r12, lsr #3
     ab4:	e1b03203 	lsls	r3, r3, #4
     ab8:	11b0c22c 	lsrsne	r12, r12, #4
     abc:	1afffff0 	bne	a84 <__aeabi_fdiv+0x4c>
     ac0:	e35200fd 	cmp	r2, #253	; 0xfd
     ac4:	8affff9d 	bhi	940 <__aeabi_fmul+0xa0>
     ac8:	e1530001 	cmp	r3, r1
     acc:	e0a00b82 	adc	r0, r0, r2, lsl #23
     ad0:	03c00001 	biceq	r0, r0, #1
     ad4:	e12fff1e 	bx	lr
     ad8:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
     adc:	e18c04a0 	orr	r0, r12, r0, lsr #9
     ae0:	e292207f 	adds	r2, r2, #127	; 0x7f
     ae4:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
     ae8:	c1800b82 	orrgt	r0, r0, r2, lsl #23
     aec:	c12fff1e 	bxgt	lr
     af0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     af4:	e3a03000 	mov	r3, #0
     af8:	e2522001 	subs	r2, r2, #1
     afc:	eaffff8f 	b	940 <__aeabi_fmul+0xa0>
     b00:	e3320000 	teq	r2, #0
     b04:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
     b08:	01a00080 	lsleq	r0, r0, #1
     b0c:	03100502 	tsteq	r0, #8388608	; 0x800000
     b10:	02422001 	subeq	r2, r2, #1
     b14:	0afffffb 	beq	b08 <__aeabi_fdiv+0xd0>
     b18:	e180000c 	orr	r0, r0, r12
     b1c:	e3330000 	teq	r3, #0
     b20:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
     b24:	01a01081 	lsleq	r1, r1, #1
     b28:	03110502 	tsteq	r1, #8388608	; 0x800000
     b2c:	02433001 	subeq	r3, r3, #1
     b30:	0afffffb 	beq	b24 <__aeabi_fdiv+0xec>
     b34:	e181100c 	orr	r1, r1, r12
     b38:	eaffffc4 	b	a50 <__aeabi_fdiv+0x18>
     b3c:	e00c3ba1 	and	r3, r12, r1, lsr #23
     b40:	e132000c 	teq	r2, r12
     b44:	1a000005 	bne	b60 <__aeabi_fdiv+0x128>
     b48:	e1b02480 	lsls	r2, r0, #9
     b4c:	1affffb6 	bne	a2c <__aeabi_fmul+0x18c>
     b50:	e133000c 	teq	r3, r12
     b54:	1affffaf 	bne	a18 <__aeabi_fmul+0x178>
     b58:	e1a00001 	mov	r0, r1
     b5c:	eaffffb2 	b	a2c <__aeabi_fmul+0x18c>
     b60:	e133000c 	teq	r3, r12
     b64:	1a000003 	bne	b78 <__aeabi_fdiv+0x140>
     b68:	e1b03481 	lsls	r3, r1, #9
     b6c:	0affff97 	beq	9d0 <__aeabi_fmul+0x130>
     b70:	e1a00001 	mov	r0, r1
     b74:	eaffffac 	b	a2c <__aeabi_fmul+0x18c>
     b78:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
     b7c:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
     b80:	1affffde 	bne	b00 <__aeabi_fdiv+0xc8>
     b84:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
     b88:	1affffa2 	bne	a18 <__aeabi_fmul+0x178>
     b8c:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
     b90:	1affff8e 	bne	9d0 <__aeabi_fmul+0x130>
     b94:	eaffffa4 	b	a2c <__aeabi_fmul+0x18c>

00000b98 <__aeabi_f2iz>:
     b98:	e1a02080 	lsl	r2, r0, #1
     b9c:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
     ba0:	3a000008 	bcc	bc8 <__aeabi_f2iz+0x30>
     ba4:	e3a0309e 	mov	r3, #158	; 0x9e
     ba8:	e0532c22 	subs	r2, r3, r2, lsr #24
     bac:	9a000007 	bls	bd0 <__aeabi_f2iz+0x38>
     bb0:	e1a03400 	lsl	r3, r0, #8
     bb4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
     bb8:	e3100102 	tst	r0, #-2147483648	; 0x80000000
     bbc:	e1a00233 	lsr	r0, r3, r2
     bc0:	12600000 	rsbne	r0, r0, #0
     bc4:	e12fff1e 	bx	lr
     bc8:	e3a00000 	mov	r0, #0
     bcc:	e12fff1e 	bx	lr
     bd0:	e3720061 	cmn	r2, #97	; 0x61
     bd4:	1a000001 	bne	be0 <__aeabi_f2iz+0x48>
     bd8:	e1b02480 	lsls	r2, r0, #9
     bdc:	1a000002 	bne	bec <__aeabi_f2iz+0x54>
     be0:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
     be4:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
     be8:	e12fff1e 	bx	lr
     bec:	e3a00000 	mov	r0, #0
     bf0:	e12fff1e 	bx	lr

00000bf4 <atexit>:
     bf4:	e1a01000 	mov	r1, r0
     bf8:	e3a00000 	mov	r0, #0
     bfc:	e92d4008 	push	{r3, lr}
     c00:	e1a02000 	mov	r2, r0
     c04:	e1a03000 	mov	r3, r0
     c08:	eb00000e 	bl	c48 <__register_exitproc>
     c0c:	e8bd4008 	pop	{r3, lr}
     c10:	e12fff1e 	bx	lr

00000c14 <exit>:
     c14:	e92d4008 	push	{r3, lr}
     c18:	e3a01000 	mov	r1, #0
     c1c:	e1a04000 	mov	r4, r0
     c20:	eb000045 	bl	d3c <__call_exitprocs>
     c24:	e59f3018 	ldr	r3, [pc, #24]	; c44 <exit+0x30>
     c28:	e5930000 	ldr	r0, [r3]
     c2c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     c30:	e3530000 	cmp	r3, #0
     c34:	11a0e00f 	movne	lr, pc
     c38:	112fff13 	bxne	r3
     c3c:	e1a00004 	mov	r0, r4
     c40:	eb0000c9 	bl	f6c <_exit>
     c44:	00001088 	.word	0x00001088

00000c48 <__register_exitproc>:
     c48:	e59fc0e4 	ldr	r12, [pc, #228]	; d34 <__register_exitproc+0xec>
     c4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     c50:	e59c4000 	ldr	r4, [r12]
     c54:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     c58:	e35c0000 	cmp	r12, #0
     c5c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     c60:	e59c5004 	ldr	r5, [r12, #4]
     c64:	0584c148 	streq	r12, [r4, #328]	; 0x148
     c68:	e355001f 	cmp	r5, #31
     c6c:	e24dd010 	sub	sp, sp, #16
     c70:	e1a06000 	mov	r6, r0
     c74:	da000015 	ble	cd0 <__register_exitproc+0x88>
     c78:	e59f00b8 	ldr	r0, [pc, #184]	; d38 <__register_exitproc+0xf0>
     c7c:	e3500000 	cmp	r0, #0
     c80:	1a000001 	bne	c8c <__register_exitproc+0x44>
     c84:	e3e00000 	mvn	r0, #0
     c88:	ea000018 	b	cf0 <__register_exitproc+0xa8>
     c8c:	e3a00e19 	mov	r0, #400	; 0x190
     c90:	e58d100c 	str	r1, [sp, #12]
     c94:	e58d2008 	str	r2, [sp, #8]
     c98:	e58d3004 	str	r3, [sp, #4]
     c9c:	e320f000 	nop	{0}
     ca0:	e250c000 	subs	r12, r0, #0
     ca4:	e59d100c 	ldr	r1, [sp, #12]
     ca8:	e59d2008 	ldr	r2, [sp, #8]
     cac:	e59d3004 	ldr	r3, [sp, #4]
     cb0:	0afffff3 	beq	c84 <__register_exitproc+0x3c>
     cb4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     cb8:	e3a00000 	mov	r0, #0
     cbc:	e58c0004 	str	r0, [r12, #4]
     cc0:	e58c5000 	str	r5, [r12]
     cc4:	e584c148 	str	r12, [r4, #328]	; 0x148
     cc8:	e58c0188 	str	r0, [r12, #392]	; 0x188
     ccc:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     cd0:	e3560000 	cmp	r6, #0
     cd4:	e59c4004 	ldr	r4, [r12, #4]
     cd8:	1a000007 	bne	cfc <__register_exitproc+0xb4>
     cdc:	e2843002 	add	r3, r4, #2
     ce0:	e2844001 	add	r4, r4, #1
     ce4:	e78c1103 	str	r1, [r12, r3, lsl #2]
     ce8:	e58c4004 	str	r4, [r12, #4]
     cec:	e3a00000 	mov	r0, #0
     cf0:	e28dd010 	add	sp, sp, #16
     cf4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     cf8:	e12fff1e 	bx	lr
     cfc:	e3a00001 	mov	r0, #1
     d00:	e1a00410 	lsl	r0, r0, r4
     d04:	e08c8104 	add	r8, r12, r4, lsl #2
     d08:	e3560002 	cmp	r6, #2
     d0c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     d10:	e5883108 	str	r3, [r8, #264]	; 0x108
     d14:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     d18:	e1877000 	orr	r7, r7, r0
     d1c:	01830000 	orreq	r0, r3, r0
     d20:	e1a05008 	mov	r5, r8
     d24:	e5882088 	str	r2, [r8, #136]	; 0x88
     d28:	e58c7188 	str	r7, [r12, #392]	; 0x188
     d2c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     d30:	eaffffe9 	b	cdc <__register_exitproc+0x94>
     d34:	00001088 	.word	0x00001088
     d38:	00000000 	.word	0x00000000

00000d3c <__call_exitprocs>:
     d3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     d40:	e59f3168 	ldr	r3, [pc, #360]	; eb0 <__call_exitprocs+0x174>
     d44:	e5933000 	ldr	r3, [r3]
     d48:	e24dd014 	sub	sp, sp, #20
     d4c:	e58d3004 	str	r3, [sp, #4]
     d50:	e2833f52 	add	r3, r3, #328	; 0x148
     d54:	e58d0008 	str	r0, [sp, #8]
     d58:	e58d300c 	str	r3, [sp, #12]
     d5c:	e1a07001 	mov	r7, r1
     d60:	e3a08001 	mov	r8, #1
     d64:	e59d3004 	ldr	r3, [sp, #4]
     d68:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     d6c:	e3560000 	cmp	r6, #0
     d70:	e59db00c 	ldr	r11, [sp, #12]
     d74:	0a000033 	beq	e48 <__call_exitprocs+0x10c>
     d78:	e5965004 	ldr	r5, [r6, #4]
     d7c:	e2554001 	subs	r4, r5, #1
     d80:	5286a088 	addpl	r10, r6, #136	; 0x88
     d84:	5285501f 	addpl	r5, r5, #31
     d88:	508a5105 	addpl	r5, r10, r5, lsl #2
     d8c:	5a000007 	bpl	db0 <__call_exitprocs+0x74>
     d90:	ea000029 	b	e3c <__call_exitprocs+0x100>
     d94:	e5953000 	ldr	r3, [r5]
     d98:	e1530007 	cmp	r3, r7
     d9c:	0a000005 	beq	db8 <__call_exitprocs+0x7c>
     da0:	e2444001 	sub	r4, r4, #1
     da4:	e3740001 	cmn	r4, #1
     da8:	e2455004 	sub	r5, r5, #4
     dac:	0a000022 	beq	e3c <__call_exitprocs+0x100>
     db0:	e3570000 	cmp	r7, #0
     db4:	1afffff6 	bne	d94 <__call_exitprocs+0x58>
     db8:	e5963004 	ldr	r3, [r6, #4]
     dbc:	e06a2005 	rsb	r2, r10, r5
     dc0:	e2433001 	sub	r3, r3, #1
     dc4:	e0862002 	add	r2, r6, r2
     dc8:	e1530004 	cmp	r3, r4
     dcc:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     dd0:	13a01000 	movne	r1, #0
     dd4:	05864004 	streq	r4, [r6, #4]
     dd8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     ddc:	e3530000 	cmp	r3, #0
     de0:	0affffee 	beq	da0 <__call_exitprocs+0x64>
     de4:	e1a02418 	lsl	r2, r8, r4
     de8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     dec:	e1120001 	tst	r2, r1
     df0:	e5969004 	ldr	r9, [r6, #4]
     df4:	0a000016 	beq	e54 <__call_exitprocs+0x118>
     df8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     dfc:	e1120001 	tst	r2, r1
     e00:	1a000016 	bne	e60 <__call_exitprocs+0x124>
     e04:	e59d0008 	ldr	r0, [sp, #8]
     e08:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     e0c:	e1a0e00f 	mov	lr, pc
     e10:	e12fff13 	bx	r3
     e14:	e5963004 	ldr	r3, [r6, #4]
     e18:	e1530009 	cmp	r3, r9
     e1c:	1affffd0 	bne	d64 <__call_exitprocs+0x28>
     e20:	e59b3000 	ldr	r3, [r11]
     e24:	e1530006 	cmp	r3, r6
     e28:	1affffcd 	bne	d64 <__call_exitprocs+0x28>
     e2c:	e2444001 	sub	r4, r4, #1
     e30:	e3740001 	cmn	r4, #1
     e34:	e2455004 	sub	r5, r5, #4
     e38:	1affffdc 	bne	db0 <__call_exitprocs+0x74>
     e3c:	e59f1070 	ldr	r1, [pc, #112]	; eb4 <__call_exitprocs+0x178>
     e40:	e3510000 	cmp	r1, #0
     e44:	1a000009 	bne	e70 <__call_exitprocs+0x134>
     e48:	e28dd014 	add	sp, sp, #20
     e4c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     e50:	e12fff1e 	bx	lr
     e54:	e1a0e00f 	mov	lr, pc
     e58:	e12fff13 	bx	r3
     e5c:	eaffffec 	b	e14 <__call_exitprocs+0xd8>
     e60:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
     e64:	e1a0e00f 	mov	lr, pc
     e68:	e12fff13 	bx	r3
     e6c:	eaffffe8 	b	e14 <__call_exitprocs+0xd8>
     e70:	e5963004 	ldr	r3, [r6, #4]
     e74:	e3530000 	cmp	r3, #0
     e78:	e5963000 	ldr	r3, [r6]
     e7c:	1a000008 	bne	ea4 <__call_exitprocs+0x168>
     e80:	e3530000 	cmp	r3, #0
     e84:	0a000006 	beq	ea4 <__call_exitprocs+0x168>
     e88:	e1a00006 	mov	r0, r6
     e8c:	e58b3000 	str	r3, [r11]
     e90:	e320f000 	nop	{0}
     e94:	e59b6000 	ldr	r6, [r11]
     e98:	e3560000 	cmp	r6, #0
     e9c:	1affffb5 	bne	d78 <__call_exitprocs+0x3c>
     ea0:	eaffffe8 	b	e48 <__call_exitprocs+0x10c>
     ea4:	e1a0b006 	mov	r11, r6
     ea8:	e1a06003 	mov	r6, r3
     eac:	eafffff9 	b	e98 <__call_exitprocs+0x15c>
     eb0:	00001088 	.word	0x00001088
     eb4:	00000000 	.word	0x00000000

00000eb8 <register_fini>:
     eb8:	e92d4008 	push	{r3, lr}
     ebc:	e59f3010 	ldr	r3, [pc, #16]	; ed4 <register_fini+0x1c>
     ec0:	e3530000 	cmp	r3, #0
     ec4:	159f000c 	ldrne	r0, [pc, #12]	; ed8 <register_fini+0x20>
     ec8:	1bffff49 	blne	bf4 <atexit>
     ecc:	e8bd4008 	pop	{r3, lr}
     ed0:	e12fff1e 	bx	lr
     ed4:	000010b0 	.word	0x000010b0
     ed8:	00000edc 	.word	0x00000edc

00000edc <__libc_fini_array>:
     edc:	e92d4038 	push	{r3, r4, r5, lr}
     ee0:	e59f5030 	ldr	r5, [pc, #48]	; f18 <__libc_fini_array+0x3c>
     ee4:	e59f4030 	ldr	r4, [pc, #48]	; f1c <__libc_fini_array+0x40>
     ee8:	e0654004 	rsb	r4, r5, r4
     eec:	e1b04144 	asrs	r4, r4, #2
     ef0:	10855104 	addne	r5, r5, r4, lsl #2
     ef4:	0a000004 	beq	f0c <__libc_fini_array+0x30>
     ef8:	e5353004 	ldr	r3, [r5, #-4]!
     efc:	e1a0e00f 	mov	lr, pc
     f00:	e12fff13 	bx	r3
     f04:	e2544001 	subs	r4, r4, #1
     f08:	1afffffa 	bne	ef8 <__libc_fini_array+0x1c>
     f0c:	eb000067 	bl	10b0 <__libc_fini>
     f10:	e8bd4038 	pop	{r3, r4, r5, lr}
     f14:	e12fff1e 	bx	lr
     f18:	000010c8 	.word	0x000010c8
     f1c:	000010cc 	.word	0x000010cc

00000f20 <__cs3_premain>:
     f20:	e92d4008 	push	{r3, lr}
     f24:	eb00001d 	bl	fa0 <__libc_init_array>
     f28:	e59f3030 	ldr	r3, [pc, #48]	; f60 <__cs3_premain+0x40>
     f2c:	e3530000 	cmp	r3, #0
     f30:	15930000 	ldrne	r0, [r3]
     f34:	01a00003 	moveq	r0, r3
     f38:	e59f3024 	ldr	r3, [pc, #36]	; f64 <__cs3_premain+0x44>
     f3c:	e3530000 	cmp	r3, #0
     f40:	15931000 	ldrne	r1, [r3]
     f44:	01a01003 	moveq	r1, r3
     f48:	e3a02000 	mov	r2, #0
     f4c:	ebfffd7f 	bl	550 <main>
     f50:	e59f3010 	ldr	r3, [pc, #16]	; f68 <__cs3_premain+0x48>
     f54:	e3530000 	cmp	r3, #0
     f58:	1bffff2d 	blne	c14 <exit>
     f5c:	eafffffe 	b	f5c <__cs3_premain+0x3c>
	...
     f68:	00000c14 	.word	0x00000c14

00000f6c <_exit>:
     f6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f70:	e3a00018 	mov	r0, #24
     f74:	e59f1004 	ldr	r1, [pc, #4]	; f80 <_exit+0x14>
     f78:	ef123456 	svc	0x00123456
     f7c:	eafffffe 	b	f7c <_exit+0x10>
     f80:	00020026 	.word	0x00020026

00000f84 <__cs3_isr_interrupt>:
     f84:	eafffffe 	b	f84 <__cs3_isr_interrupt>

00000f88 <__cs3_isr_undef>:
     f88:	eafffffe 	b	f88 <__cs3_isr_undef>

00000f8c <__cs3_isr_swi>:
     f8c:	eafffffe 	b	f8c <__cs3_isr_swi>

00000f90 <__cs3_isr_pabort>:
     f90:	eafffffe 	b	f90 <__cs3_isr_pabort>

00000f94 <__cs3_isr_dabort>:
     f94:	eafffffe 	b	f94 <__cs3_isr_dabort>

00000f98 <__cs3_isr_irq>:
     f98:	eafffffe 	b	f98 <__cs3_isr_irq>

00000f9c <__cs3_isr_fiq>:
     f9c:	eafffffe 	b	f9c <__cs3_isr_fiq>

00000fa0 <__libc_init_array>:
     fa0:	e92d4070 	push	{r4, r5, r6, lr}
     fa4:	e59f506c 	ldr	r5, [pc, #108]	; 1018 <__libc_init_array+0x78>
     fa8:	e59f606c 	ldr	r6, [pc, #108]	; 101c <__libc_init_array+0x7c>
     fac:	e0656006 	rsb	r6, r5, r6
     fb0:	e1b06146 	asrs	r6, r6, #2
     fb4:	12455004 	subne	r5, r5, #4
     fb8:	13a04000 	movne	r4, #0
     fbc:	0a000005 	beq	fd8 <__libc_init_array+0x38>
     fc0:	e5b53004 	ldr	r3, [r5, #4]!
     fc4:	e2844001 	add	r4, r4, #1
     fc8:	e1a0e00f 	mov	lr, pc
     fcc:	e12fff13 	bx	r3
     fd0:	e1560004 	cmp	r6, r4
     fd4:	1afffff9 	bne	fc0 <__libc_init_array+0x20>
     fd8:	e59f5040 	ldr	r5, [pc, #64]	; 1020 <__libc_init_array+0x80>
     fdc:	e59f6040 	ldr	r6, [pc, #64]	; 1024 <__libc_init_array+0x84>
     fe0:	e0656006 	rsb	r6, r5, r6
     fe4:	eb000029 	bl	1090 <_init>
     fe8:	e1b06146 	asrs	r6, r6, #2
     fec:	12455004 	subne	r5, r5, #4
     ff0:	13a04000 	movne	r4, #0
     ff4:	0a000005 	beq	1010 <__libc_init_array+0x70>
     ff8:	e5b53004 	ldr	r3, [r5, #4]!
     ffc:	e2844001 	add	r4, r4, #1
    1000:	e1a0e00f 	mov	lr, pc
    1004:	e12fff13 	bx	r3
    1008:	e1560004 	cmp	r6, r4
    100c:	1afffff9 	bne	ff8 <__libc_init_array+0x58>
    1010:	e8bd4070 	pop	{r4, r5, r6, lr}
    1014:	e12fff1e 	bx	lr
    1018:	000010a8 	.word	0x000010a8
    101c:	000010a8 	.word	0x000010a8
    1020:	000010a8 	.word	0x000010a8
    1024:	000010b0 	.word	0x000010b0

Disassembly of section .rodata:

0000102c <_global_impure_ptr-0x5c>:
    102c:	000eadc8 	.word	0x000eadc8
    1030:	000ea188 	.word	0x000ea188
    1034:	000e9548 	.word	0x000e9548
    1038:	000e8908 	.word	0x000e8908
    103c:	000e7cc8 	.word	0x000e7cc8
    1040:	000e7088 	.word	0x000e7088
    1044:	000e6448 	.word	0x000e6448
    1048:	000e5808 	.word	0x000e5808
    104c:	000e4bc8 	.word	0x000e4bc8
    1050:	000e3f88 	.word	0x000e3f88
    1054:	00028478 	.word	0x00028478
    1058:	00028168 	.word	0x00028168
    105c:	00027e58 	.word	0x00027e58
    1060:	00027b48 	.word	0x00027b48
    1064:	00027838 	.word	0x00027838
    1068:	00027528 	.word	0x00027528
    106c:	00027218 	.word	0x00027218
    1070:	00026f08 	.word	0x00026f08
    1074:	00026bf8 	.word	0x00026bf8
    1078:	000268e8 	.word	0x000268e8
    107c:	00098f88 	.word	0x00098f88
    1080:	00073788 	.word	0x00073788
    1084:	0004df88 	.word	0x0004df88

00001088 <_global_impure_ptr>:
    1088:	000eba10 00000043                       ....C...

00001090 <_init>:
    1090:	e1a0c00d 	mov	r12, sp
    1094:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1098:	e24cb004 	sub	r11, r12, #4
    109c:	e24bd028 	sub	sp, r11, #40	; 0x28
    10a0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    10a4:	e12fff1e 	bx	lr

000010a8 <__init_array_start>:
    10a8:	00000eb8 	.word	0x00000eb8

000010ac <__frame_dummy_init_array_entry>:
    10ac:	00000208                                ....

000010b0 <__libc_fini>:
    10b0:	e1a0c00d 	mov	r12, sp
    10b4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    10b8:	e24cb004 	sub	r11, r12, #4
    10bc:	e24bd028 	sub	sp, r11, #40	; 0x28
    10c0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    10c4:	e12fff1e 	bx	lr

000010c8 <__fini_array_start>:
    10c8:	000001c4 	.word	0x000001c4

000010cc <__cs3_regions>:
	...
    10d8:	000ebe40 	.word	0x000ebe40
    10dc:	00000020 	.word	0x00000020
