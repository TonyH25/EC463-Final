
D:/Ngo/classes/EC463_Spring2024/final_project/Arana/final_project/video_in_digit_classification.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 48 17 00 00 4c 17 00 00 50 17 00 00     @...H...L...P...
      30:	54 17 00 00 44 17 00 00 58 17 00 00 5c 17 00 00     T...D...X...\...

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000581 	bl	16e0 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000018e4 	.word	0x000018e4

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	0000b640 	.word	0x0000b640

00000124 <__cs3_heap_start_ptr>:
     124:	0000b668 	.word	0x0000b668

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	0000b648 	.word	0x0000b648
     170:	0000b64b 	.word	0x0000b64b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	0000b648 	.word	0x0000b648
     1bc:	0000b648 	.word	0x0000b648
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	0000b648 	.word	0x0000b648
     200:	00000000 	.word	0x00000000
     204:	000017e8 	.word	0x000017e8

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000017e8 	.word	0x000017e8
     250:	0000b64c 	.word	0x0000b64c
     254:	000018e8 	.word	0x000018e8
     258:	00000000 	.word	0x00000000

0000025c <max>:
  return digit;
}

//Return the index of the maximum array value
int max(int* arr, int len)
{
     25c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
  int max = arr[0],   // max value
     260:	e5904000 	ldr	r4, [r0]
      ret = 0;        // index of max value
  int i;
  for(i = 1; i < len; i++)
     264:	e3510001 	cmp	r1, #1
     268:	da00000a 	ble	298 <max+0x3c>
     26c:	e1a0c000 	mov	r12, r0
     270:	e3a03001 	mov	r3, #1

//Return the index of the maximum array value
int max(int* arr, int len)
{
  int max = arr[0],   // max value
      ret = 0;        // index of max value
     274:	e3a00000 	mov	r0, #0
  int i;
  for(i = 1; i < len; i++)
  {
    if(arr[i] > max)
     278:	e5bc2004 	ldr	r2, [r12, #4]!
     27c:	e1520004 	cmp	r2, r4
     280:	c1a00003 	movgt	r0, r3
    {
      max = arr[i];
     284:	c1a04002 	movgt	r4, r2
int max(int* arr, int len)
{
  int max = arr[0],   // max value
      ret = 0;        // index of max value
  int i;
  for(i = 1; i < len; i++)
     288:	e2833001 	add	r3, r3, #1
     28c:	e1530001 	cmp	r3, r1
     290:	1afffff8 	bne	278 <max+0x1c>
     294:	ea000000 	b	29c <max+0x40>

//Return the index of the maximum array value
int max(int* arr, int len)
{
  int max = arr[0],   // max value
      ret = 0;        // index of max value
     298:	e3a00000 	mov	r0, #0
      max = arr[i];
      ret = i;
    }
  }
  return ret;
}
     29c:	e8bd0010 	ldmfd	sp!, {r4}
     2a0:	e12fff1e 	bx	lr

000002a4 <classify>:

int max(int*, int); //parameters are array of ints and length of array


int classify(img_type image)
{
     2a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     2a8:	e24dd05c 	sub	sp, sp, #92	; 0x5c
     2ac:	e1a0b000 	mov	r11, r0
  //Create array of 10 potential digits
  int output[10];
  //Initialize weights
  weight weights[10] = {weights0, weights1, weights2, weights3, weights4, weights5, weights6, weights7, weights8, weights9};
     2b0:	e28de008 	add	lr, sp, #8
     2b4:	e301c7ec 	movw	r12, #6124	; 0x17ec
     2b8:	e340c000 	movt	r12, #0
     2bc:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
     2c0:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     2c4:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
     2c8:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     2cc:	e89c0003 	ldm	r12, {r0, r1}
     2d0:	e88e0003 	stm	lr, {r0, r1}
     2d4:	e3a02000 	mov	r2, #0
     2d8:	e58d2004 	str	r2, [sp, #4]
	float sum = 0;
    for(j = 0; j < 28; j++)
    {
      for(k = 0; k < 28; k++)
      {
        sum += weights[i][j][k]*(float)image[j][k];
     2dc:	e1a09002 	mov	r9, r2
     2e0:	ea00001a 	b	350 <classify+0xac>
     2e4:	e7d70004 	ldrb	r0, [r7, r4]
     2e8:	eb0002a0 	bl	d70 <__aeabi_ui2f>
     2ec:	e5b51004 	ldr	r1, [r5, #4]!
     2f0:	eb0002d7 	bl	e54 <__aeabi_fmul>
     2f4:	e1a01000 	mov	r1, r0
     2f8:	e1a00006 	mov	r0, r6
     2fc:	eb00022c 	bl	bb4 <__addsf3>
     300:	e1a06000 	mov	r6, r0
  {
    //int sum = 0;
	float sum = 0;
    for(j = 0; j < 28; j++)
    {
      for(k = 0; k < 28; k++)
     304:	e2844001 	add	r4, r4, #1
     308:	e354001c 	cmp	r4, #28
     30c:	1afffff4 	bne	2e4 <classify+0x40>
     310:	e28aa070 	add	r10, r10, #112	; 0x70
     314:	e288801c 	add	r8, r8, #28
  //Perform linear classification and populate array
  for(i = 0; i < 10; i++)
  {
    //int sum = 0;
	float sum = 0;
    for(j = 0; j < 28; j++)
     318:	e3580e31 	cmp	r8, #784	; 0x310
     31c:	0a000003 	beq	330 <classify+0x8c>
typedef char  (*img_type)[28];

int max(int*, int); //parameters are array of ints and length of array


int classify(img_type image)
     320:	e08b7008 	add	r7, r11, r8
     324:	e24a5004 	sub	r5, r10, #4
     328:	e1a04009 	mov	r4, r9
     32c:	eaffffec 	b	2e4 <classify+0x40>
        sum += weights[i][j][k]*(float)image[j][k];
        //printf("%d ", (int) image[j][k]);
      }
      //printf("\n");
    }
    output[i] = (int)sum;
     330:	eb000385 	bl	114c <__aeabi_f2iz>
     334:	e28d3030 	add	r3, sp, #48	; 0x30
     338:	e59d2004 	ldr	r2, [sp, #4]
     33c:	e7830002 	str	r0, [r3, r2]
     340:	e2822004 	add	r2, r2, #4
     344:	e58d2004 	str	r2, [sp, #4]
  int output[10];
  //Initialize weights
  weight weights[10] = {weights0, weights1, weights2, weights3, weights4, weights5, weights6, weights7, weights8, weights9};
  int i, j, k;
  //Perform linear classification and populate array
  for(i = 0; i < 10; i++)
     348:	e3520028 	cmp	r2, #40	; 0x28
     34c:	0a000005 	beq	368 <classify+0xc4>
     350:	e28d2008 	add	r2, sp, #8
     354:	e59d3004 	ldr	r3, [sp, #4]
     358:	e793a002 	ldr	r10, [r3, r2]
	float sum = 0;
    for(j = 0; j < 28; j++)
    {
      for(k = 0; k < 28; k++)
      {
        sum += weights[i][j][k]*(float)image[j][k];
     35c:	e1a08009 	mov	r8, r9
     360:	e3a06000 	mov	r6, #0
     364:	eaffffed 	b	320 <classify+0x7c>
      }
      //printf("\n");
    }
    output[i] = (int)sum;
  }
  int digit = max(output,10);
     368:	e28d0030 	add	r0, sp, #48	; 0x30
     36c:	e3a0100a 	mov	r1, #10
     370:	ebffffb9 	bl	25c <max>
  return digit;
}
     374:	e28dd05c 	add	sp, sp, #92	; 0x5c
     378:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

0000037c <Write_small_img>:
	(x1, y1): coordinate of the top left corner on the screen
	image[][28]: pointer to the current image
	base_address: base address of the buffer (SDRAM_BASE or FPGA_ONCHIP_BASE)
****************************************************************************/
void Write_small_img(int x1, int y1, char image[][28], int base_address)
{
     37c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, r10}
     380:	e24dd00c 	sub	sp, sp, #12
	volatile short* pixel_buffer = (short*) base_address;
	volatile short pixel;

	/* assume that the box coordinates are valid */
	y = 0;
	for (row = y1; row < (y1+28); row++)
     384:	e281801c 	add	r8, r1, #28
     388:	e1510008 	cmp	r1, r8
     38c:	ba00000d 	blt	3c8 <Write_small_img+0x4c>
     390:	ea000018 	b	3f8 <Write_small_img+0x7c>
	{
		x = 0;
		for (col = x1; col < (x1+28); col++)
		{
			offset = (row << 9) + col;
			if (image[x][y] != 0)
     394:	e7d4c002 	ldrb	r12, [r4, r2]
     398:	e35c0000 	cmp	r12, #0
				pixel = 0xFFFF;
     39c:	11cd60b6 	strhne	r6, [sp, #6]
			else
				pixel = 0x0000;  // can display any color for digit background
     3a0:	01cd50b6 	strheq	r5, [sp, #6]
			*(pixel_buffer + offset) = (short)pixel;
     3a4:	e1ddc0b6 	ldrh	r12, [sp, #6]
     3a8:	e0c1c0b2 	strh	r12, [r1], #2
     3ac:	e282201c 	add	r2, r2, #28
	/* assume that the box coordinates are valid */
	y = 0;
	for (row = y1; row < (y1+28); row++)
	{
		x = 0;
		for (col = x1; col < (x1+28); col++)
     3b0:	e3520e31 	cmp	r2, #784	; 0x310
     3b4:	1afffff6 	bne	394 <Write_small_img+0x18>
	volatile short* pixel_buffer = (short*) base_address;
	volatile short pixel;

	/* assume that the box coordinates are valid */
	y = 0;
	for (row = y1; row < (y1+28); row++)
     3b8:	e2877001 	add	r7, r7, #1
     3bc:	e1570008 	cmp	r7, r8
     3c0:	1a000005 	bne	3dc <Write_small_img+0x60>
     3c4:	ea00000b 	b	3f8 <Write_small_img+0x7c>
     3c8:	e1a07001 	mov	r7, r1
	{
		x = 0;
		for (col = x1; col < (x1+28); col++)
     3cc:	e280a01c 	add	r10, r0, #28
	Function to draw a filled rectangle on the VGA monitor with an image
	(x1, y1): coordinate of the top left corner on the screen
	image[][28]: pointer to the current image
	base_address: base address of the buffer (SDRAM_BASE or FPGA_ONCHIP_BASE)
****************************************************************************/
void Write_small_img(int x1, int y1, char image[][28], int base_address)
     3d0:	e3a05000 	mov	r5, #0
     3d4:	e0619002 	rsb	r9, r1, r2
		x = 0;
		for (col = x1; col < (x1+28); col++)
		{
			offset = (row << 9) + col;
			if (image[x][y] != 0)
				pixel = 0xFFFF;
     3d8:	e3e06000 	mvn	r6, #0
	/* assume that the box coordinates are valid */
	y = 0;
	for (row = y1; row < (y1+28); row++)
	{
		x = 0;
		for (col = x1; col < (x1+28); col++)
     3dc:	e150000a 	cmp	r0, r10
     3e0:	aafffff4 	bge	3b8 <Write_small_img+0x3c>
	Function to draw a filled rectangle on the VGA monitor with an image
	(x1, y1): coordinate of the top left corner on the screen
	image[][28]: pointer to the current image
	base_address: base address of the buffer (SDRAM_BASE or FPGA_ONCHIP_BASE)
****************************************************************************/
void Write_small_img(int x1, int y1, char image[][28], int base_address)
     3e4:	e0801487 	add	r1, r0, r7, lsl #9
     3e8:	e0831081 	add	r1, r3, r1, lsl #1
     3ec:	e1a02005 	mov	r2, r5
     3f0:	e0894007 	add	r4, r9, r7
     3f4:	eaffffe6 	b	394 <Write_small_img+0x18>
			*(pixel_buffer + offset) = (short)pixel;
			x++;
		}
		y++;
	}
}
     3f8:	e28dd00c 	add	sp, sp, #12
     3fc:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, r10}
     400:	e12fff1e 	bx	lr

00000404 <CopyInput>:
/**
 * Copy a 28x28 box that goes from (106,146) to (133,173) to global array initIMG[28][28] 
 */
void CopyInput(short int img[][28]){
     404:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int o_set = 0, row, col;
	int i = 0, j = 0;
	volatile short * fpga_chip = (short *) FPGA_ONCHIP_BASE;	//  on-chip buffer
	//106+27, 146+27
	for (row = 106; row <= 133; row++){
     408:	e3a0c06a 	mov	r12, #106	; 0x6a
	}
}
/**
 * Copy a 28x28 box that goes from (106,146) to (133,173) to global array initIMG[28][28] 
 */
void CopyInput(short int img[][28]){
     40c:	e3a04000 	mov	r4, #0
     410:	ea000008 	b	438 <CopyInput+0x34>
	//106+27, 146+27
	for (row = 106; row <= 133; row++){
		i=0;
		for (col = 146; col <= 173; col++){
			o_set = (row << 9) + col;						// compute offset
			img[i][j] = *(fpga_chip+o_set);
     414:	e0d210b2 	ldrh	r1, [r2], #2
     418:	e18010b3 	strh	r1, [r0, r3]
     41c:	e2833038 	add	r3, r3, #56	; 0x38
	int i = 0, j = 0;
	volatile short * fpga_chip = (short *) FPGA_ONCHIP_BASE;	//  on-chip buffer
	//106+27, 146+27
	for (row = 106; row <= 133; row++){
		i=0;
		for (col = 146; col <= 173; col++){
     420:	e3530e62 	cmp	r3, #1568	; 0x620
     424:	1afffffa 	bne	414 <CopyInput+0x10>
void CopyInput(short int img[][28]){
	int o_set = 0, row, col;
	int i = 0, j = 0;
	volatile short * fpga_chip = (short *) FPGA_ONCHIP_BASE;	//  on-chip buffer
	//106+27, 146+27
	for (row = 106; row <= 133; row++){
     428:	e28cc001 	add	r12, r12, #1
     42c:	e2800002 	add	r0, r0, #2
     430:	e35c0086 	cmp	r12, #134	; 0x86
     434:	0a000004 	beq	44c <CopyInput+0x48>
	}
}
/**
 * Copy a 28x28 box that goes from (106,146) to (133,173) to global array initIMG[28][28] 
 */
void CopyInput(short int img[][28]){
     438:	e1a0250c 	lsl	r2, r12, #10
     43c:	e2822f49 	add	r2, r2, #292	; 0x124
     440:	e2822332 	add	r2, r2, #-939524096	; 0xc8000000
     444:	e1a03004 	mov	r3, r4
     448:	eafffff1 	b	414 <CopyInput+0x10>
			i++;
		}
		//i++;
		j++;
	}
}
     44c:	e8bd0010 	ldmfd	sp!, {r4}
     450:	e12fff1e 	bx	lr

00000454 <VGA_loadInit>:
//Draws a 28x28 array based on the coords given (top_x to top_x+27) and (top_y to top_y+27)
void VGA_loadInit(int top_x, int top_y, short int img[][28]){
     454:	e92d00f0 	push	{r4, r5, r6, r7}
	int offset, row, col;
	int i = 0, j = 0;
	volatile short * pixel_buffer = (short *)SDRAM_BASE;	//  SRAM buffer
	/* assume that the box coordinates are valid */
	//for (row = top_x; row < (top_x+28); row++)
	for (row = top_y; row < (top_y+28); row++)
     458:	e281301c 	add	r3, r1, #28
     45c:	e1510003 	cmp	r1, r3
     460:	aa000015 	bge	4bc <VGA_loadInit+0x68>
     464:	e1a04002 	mov	r4, r2
	}
}
//Draws a 28x28 array based on the coords given (top_x to top_x+27) and (top_y to top_y+27)
void VGA_loadInit(int top_x, int top_y, short int img[][28]){
	int offset, row, col;
	int i = 0, j = 0;
     468:	e3a05000 	mov	r5, #0
	//for (row = top_x; row < (top_x+28); row++)
	for (row = top_y; row < (top_y+28); row++)
	{
		i=0;
		//for (col = top_y; col < (top_y+28); col++)
		for (col = top_x; col < (top_x+28); col++)
     46c:	e280601c 	add	r6, r0, #28
		//i++;
		j++;
	}
}
//Draws a 28x28 array based on the coords given (top_x to top_x+27) and (top_y to top_y+27)
void VGA_loadInit(int top_x, int top_y, short int img[][28]){
     470:	e1a07005 	mov	r7, r5
     474:	ea000008 	b	49c <VGA_loadInit+0x48>
		i=0;
		//for (col = top_y; col < (top_y+28); col++)
		for (col = top_x; col < (top_x+28); col++)
		{
			offset = (row << 9) + col;						// compute offset
			*(pixel_buffer + offset) = (short)img[i][j];		// set pixel value
     478:	e194c0b3 	ldrh	r12, [r4, r3]
     47c:	e0c2c0b2 	strh	r12, [r2], #2
     480:	e2833038 	add	r3, r3, #56	; 0x38
	//for (row = top_x; row < (top_x+28); row++)
	for (row = top_y; row < (top_y+28); row++)
	{
		i=0;
		//for (col = top_y; col < (top_y+28); col++)
		for (col = top_x; col < (top_x+28); col++)
     484:	e3530e62 	cmp	r3, #1568	; 0x620
     488:	1afffffa 	bne	478 <VGA_loadInit+0x24>
			*(pixel_buffer + offset) = (short)img[i][j];		// set pixel value
			//j++;
			i++;
		}
		//i++;
		j++;
     48c:	e2855001 	add	r5, r5, #1
     490:	e2844002 	add	r4, r4, #2
	int offset, row, col;
	int i = 0, j = 0;
	volatile short * pixel_buffer = (short *)SDRAM_BASE;	//  SRAM buffer
	/* assume that the box coordinates are valid */
	//for (row = top_x; row < (top_x+28); row++)
	for (row = top_y; row < (top_y+28); row++)
     494:	e355001c 	cmp	r5, #28
     498:	0a000007 	beq	4bc <VGA_loadInit+0x68>
		//i++;
		j++;
	}
}
//Draws a 28x28 array based on the coords given (top_x to top_x+27) and (top_y to top_y+27)
void VGA_loadInit(int top_x, int top_y, short int img[][28]){
     49c:	e0853001 	add	r3, r5, r1
	//for (row = top_x; row < (top_x+28); row++)
	for (row = top_y; row < (top_y+28); row++)
	{
		i=0;
		//for (col = top_y; col < (top_y+28); col++)
		for (col = top_x; col < (top_x+28); col++)
     4a0:	e1500006 	cmp	r0, r6
     4a4:	aafffff8 	bge	48c <VGA_loadInit+0x38>
		//i++;
		j++;
	}
}
//Draws a 28x28 array based on the coords given (top_x to top_x+27) and (top_y to top_y+27)
void VGA_loadInit(int top_x, int top_y, short int img[][28]){
     4a8:	e0802483 	add	r2, r0, r3, lsl #9
     4ac:	e1a02082 	lsl	r2, r2, #1
     4b0:	e2822103 	add	r2, r2, #-1073741824	; 0xc0000000
     4b4:	e1a03007 	mov	r3, r7
     4b8:	eaffffee 	b	478 <VGA_loadInit+0x24>
			i++;
		}
		//i++;
		j++;
	}
}
     4bc:	e8bd00f0 	pop	{r4, r5, r6, r7}
     4c0:	e12fff1e 	bx	lr

000004c4 <findAverage>:
int findAverage(short int img[][28]){
     4c4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
     4c8:	e24dd024 	sub	sp, sp, #36	; 0x24
	
	volatile int row, col, R, G, B, gray, sum, avg;
	
	/* assume that the box coordinates are valid */
	sum = 0;
     4cc:	e3a03000 	mov	r3, #0
     4d0:	e58d3004 	str	r3, [sp, #4]
	for (row = 0; row < 28; row++)
     4d4:	e58d301c 	str	r3, [sp, #28]
     4d8:	e59d301c 	ldr	r3, [sp, #28]
     4dc:	e353001b 	cmp	r3, #27
     4e0:	ca000036 	bgt	5c0 <findAverage+0xfc>
	{
		for (col = 0; col < 28; col++)
     4e4:	e3a0c000 	mov	r12, #0
		{
			R = (img[col][row] >> 11) & 0x1F;
			G = (img[col][row] >> 5) & 0x3F;
			B = (img[col][row]) & 0x1F;
			gray = (R + G + B) / 3;
     4e8:	e3051556 	movw	r1, #21846	; 0x5556
     4ec:	e3451555 	movt	r1, #21845	; 0x5555
	
	/* assume that the box coordinates are valid */
	sum = 0;
	for (row = 0; row < 28; row++)
	{
		for (col = 0; col < 28; col++)
     4f0:	e58dc018 	str	r12, [sp, #24]
     4f4:	e59d3018 	ldr	r3, [sp, #24]
     4f8:	e353001b 	cmp	r3, #27
     4fc:	ca000029 	bgt	5a8 <findAverage+0xe4>
		{
			R = (img[col][row] >> 11) & 0x1F;
     500:	e59d3018 	ldr	r3, [sp, #24]
     504:	e59d201c 	ldr	r2, [sp, #28]
     508:	e0633183 	rsb	r3, r3, r3, lsl #3
     50c:	e0803183 	add	r3, r0, r3, lsl #3
     510:	e1a02082 	lsl	r2, r2, #1
     514:	e19330f2 	ldrsh	r3, [r3, r2]
     518:	e7e435d3 	ubfx	r3, r3, #11, #5
     51c:	e58d3014 	str	r3, [sp, #20]
			G = (img[col][row] >> 5) & 0x3F;
     520:	e59d3018 	ldr	r3, [sp, #24]
     524:	e59d201c 	ldr	r2, [sp, #28]
     528:	e0633183 	rsb	r3, r3, r3, lsl #3
     52c:	e0803183 	add	r3, r0, r3, lsl #3
     530:	e1a02082 	lsl	r2, r2, #1
     534:	e19330f2 	ldrsh	r3, [r3, r2]
     538:	e7e532d3 	ubfx	r3, r3, #5, #6
     53c:	e58d3010 	str	r3, [sp, #16]
			B = (img[col][row]) & 0x1F;
     540:	e59d3018 	ldr	r3, [sp, #24]
     544:	e59d201c 	ldr	r2, [sp, #28]
     548:	e0633183 	rsb	r3, r3, r3, lsl #3
     54c:	e0803183 	add	r3, r0, r3, lsl #3
     550:	e1a02082 	lsl	r2, r2, #1
     554:	e19330b2 	ldrh	r3, [r3, r2]
     558:	e203301f 	and	r3, r3, #31
     55c:	e58d300c 	str	r3, [sp, #12]
			gray = (R + G + B) / 3;
     560:	e59d4014 	ldr	r4, [sp, #20]
     564:	e59d3010 	ldr	r3, [sp, #16]
     568:	e59d200c 	ldr	r2, [sp, #12]
     56c:	e0843003 	add	r3, r4, r3
     570:	e0833002 	add	r3, r3, r2
     574:	e0c24391 	smull	r4, r2, r1, r3
     578:	e0423fc3 	sub	r3, r2, r3, asr #31
     57c:	e58d3008 	str	r3, [sp, #8]
			sum += gray;
     580:	e59d2004 	ldr	r2, [sp, #4]
     584:	e59d3008 	ldr	r3, [sp, #8]
     588:	e0823003 	add	r3, r2, r3
     58c:	e58d3004 	str	r3, [sp, #4]
	
	/* assume that the box coordinates are valid */
	sum = 0;
	for (row = 0; row < 28; row++)
	{
		for (col = 0; col < 28; col++)
     590:	e59d3018 	ldr	r3, [sp, #24]
     594:	e2833001 	add	r3, r3, #1
     598:	e58d3018 	str	r3, [sp, #24]
     59c:	e59d3018 	ldr	r3, [sp, #24]
     5a0:	e353001b 	cmp	r3, #27
     5a4:	daffffd5 	ble	500 <findAverage+0x3c>
	
	volatile int row, col, R, G, B, gray, sum, avg;
	
	/* assume that the box coordinates are valid */
	sum = 0;
	for (row = 0; row < 28; row++)
     5a8:	e59d301c 	ldr	r3, [sp, #28]
     5ac:	e2833001 	add	r3, r3, #1
     5b0:	e58d301c 	str	r3, [sp, #28]
     5b4:	e59d301c 	ldr	r3, [sp, #28]
     5b8:	e353001b 	cmp	r3, #27
     5bc:	daffffcb 	ble	4f0 <findAverage+0x2c>
			gray = (R + G + B) / 3;
			sum += gray;
		}
	}
	
	avg = sum/784;
     5c0:	e59d3004 	ldr	r3, [sp, #4]
     5c4:	e308229d 	movw	r2, #33437	; 0x829d
     5c8:	e3452397 	movt	r2, #21399	; 0x5397
     5cc:	e0c21392 	smull	r1, r2, r2, r3
     5d0:	e1a03fc3 	asr	r3, r3, #31
     5d4:	e0633442 	rsb	r3, r3, r2, asr #8
     5d8:	e58d3000 	str	r3, [sp]
	
	return avg;
     5dc:	e59d0000 	ldr	r0, [sp]
	
}
     5e0:	e28dd024 	add	sp, sp, #36	; 0x24
     5e4:	e8bd0010 	ldmfd	sp!, {r4}
     5e8:	e12fff1e 	bx	lr

000005ec <findBinIMG>:


/***************************************************************
	Calculate binary image based on threshold value
*************************************************************/
void findBinIMG(short src_img[][28], int threshold, char dst_img[][28]) {
     5ec:	e92d05f0 	push	{r4, r5, r6, r7, r8, r10}
     5f0:	e24dd018 	sub	sp, sp, #24
	volatile  int row, col, R, G, B, RGB, gray;
	int i = 0, j = 0;
	
	j = 0;
	for (row = 0; row < 28; row++)
     5f4:	e3a03000 	mov	r3, #0
     5f8:	e58d3014 	str	r3, [sp, #20]
     5fc:	e59d3014 	ldr	r3, [sp, #20]
     600:	e353001b 	cmp	r3, #27
     604:	ca00003c 	bgt	6fc <findBinIMG+0x110>
*************************************************************/
void findBinIMG(short src_img[][28], int threshold, char dst_img[][28]) {
	volatile  int row, col, R, G, B, RGB, gray;
	int i = 0, j = 0;
	
	j = 0;
     608:	e3a07000 	mov	r7, #0
	for (row = 0; row < 28; row++)
	{
		i=0;
		for (col = 0; col < 28; col++)
     60c:	e1a04007 	mov	r4, r7
		{
			R = (src_img[col][row] >> 11) & 0x1F;
			G = (src_img[col][row] >> 5) & 0x3F;
			B = (src_img[col][row]) & 0x1F;
			gray = (R + G + B) / 3;
     610:	e3055556 	movw	r5, #21846	; 0x5556
     614:	e3455555 	movt	r5, #21845	; 0x5555
			
			if (gray > threshold)
			{
				dst_img [i][j]		= (char)0xFF;
     618:	e3e06000 	mvn	r6, #0
	
	j = 0;
	for (row = 0; row < 28; row++)
	{
		i=0;
		for (col = 0; col < 28; col++)
     61c:	e58d4010 	str	r4, [sp, #16]
     620:	e59d3010 	ldr	r3, [sp, #16]
     624:	e353001b 	cmp	r3, #27
     628:	ca00002c 	bgt	6e0 <findBinIMG+0xf4>


/***************************************************************
	Calculate binary image based on threshold value
*************************************************************/
void findBinIMG(short src_img[][28], int threshold, char dst_img[][28]) {
     62c:	e0823007 	add	r3, r2, r7
	for (row = 0; row < 28; row++)
	{
		i=0;
		for (col = 0; col < 28; col++)
		{
			R = (src_img[col][row] >> 11) & 0x1F;
     630:	e59dc010 	ldr	r12, [sp, #16]
     634:	e59d8014 	ldr	r8, [sp, #20]
     638:	e06cc18c 	rsb	r12, r12, r12, lsl #3
     63c:	e080c18c 	add	r12, r0, r12, lsl #3
     640:	e1a08088 	lsl	r8, r8, #1
     644:	e19cc0f8 	ldrsh	r12, [r12, r8]
     648:	e7e4c5dc 	ubfx	r12, r12, #11, #5
     64c:	e58dc00c 	str	r12, [sp, #12]
			G = (src_img[col][row] >> 5) & 0x3F;
     650:	e59dc010 	ldr	r12, [sp, #16]
     654:	e59d8014 	ldr	r8, [sp, #20]
     658:	e06cc18c 	rsb	r12, r12, r12, lsl #3
     65c:	e080c18c 	add	r12, r0, r12, lsl #3
     660:	e1a08088 	lsl	r8, r8, #1
     664:	e19cc0f8 	ldrsh	r12, [r12, r8]
     668:	e7e5c2dc 	ubfx	r12, r12, #5, #6
     66c:	e58dc008 	str	r12, [sp, #8]
			B = (src_img[col][row]) & 0x1F;
     670:	e59dc010 	ldr	r12, [sp, #16]
     674:	e59d8014 	ldr	r8, [sp, #20]
     678:	e06cc18c 	rsb	r12, r12, r12, lsl #3
     67c:	e080c18c 	add	r12, r0, r12, lsl #3
     680:	e1a08088 	lsl	r8, r8, #1
     684:	e19cc0b8 	ldrh	r12, [r12, r8]
     688:	e20cc01f 	and	r12, r12, #31
     68c:	e58dc004 	str	r12, [sp, #4]
			gray = (R + G + B) / 3;
     690:	e59da00c 	ldr	r10, [sp, #12]
     694:	e59dc008 	ldr	r12, [sp, #8]
     698:	e59d8004 	ldr	r8, [sp, #4]
     69c:	e08ac00c 	add	r12, r10, r12
     6a0:	e08cc008 	add	r12, r12, r8
     6a4:	e0c8ac95 	smull	r10, r8, r5, r12
     6a8:	e048cfcc 	sub	r12, r8, r12, asr #31
     6ac:	e58dc000 	str	r12, [sp]
			
			if (gray > threshold)
     6b0:	e59dc000 	ldr	r12, [sp]
     6b4:	e15c0001 	cmp	r12, r1
			{
				dst_img [i][j]		= (char)0xFF;
     6b8:	d1a0c004 	movle	r12, r4
     6bc:	c1a0c006 	movgt	r12, r6
     6c0:	e5c3c000 	strb	r12, [r3]
	
	j = 0;
	for (row = 0; row < 28; row++)
	{
		i=0;
		for (col = 0; col < 28; col++)
     6c4:	e59dc010 	ldr	r12, [sp, #16]
     6c8:	e28cc001 	add	r12, r12, #1
     6cc:	e58dc010 	str	r12, [sp, #16]
     6d0:	e59dc010 	ldr	r12, [sp, #16]
     6d4:	e283301c 	add	r3, r3, #28
     6d8:	e35c001b 	cmp	r12, #27
     6dc:	daffffd3 	ble	630 <findBinIMG+0x44>
				dst_img [i][j]		= (char)0x00;
			}
			
			i++;
		}
		j++;
     6e0:	e2877001 	add	r7, r7, #1
void findBinIMG(short src_img[][28], int threshold, char dst_img[][28]) {
	volatile  int row, col, R, G, B, RGB, gray;
	int i = 0, j = 0;
	
	j = 0;
	for (row = 0; row < 28; row++)
     6e4:	e59d3014 	ldr	r3, [sp, #20]
     6e8:	e2833001 	add	r3, r3, #1
     6ec:	e58d3014 	str	r3, [sp, #20]
     6f0:	e59d3014 	ldr	r3, [sp, #20]
     6f4:	e353001b 	cmp	r3, #27
     6f8:	daffffc7 	ble	61c <findBinIMG+0x30>
			i++;
		}
		j++;
	}
	
}
     6fc:	e28dd018 	add	sp, sp, #24
     700:	e8bd05f0 	pop	{r4, r5, r6, r7, r8, r10}
     704:	e12fff1e 	bx	lr

00000708 <VGA_outline_x>:
void VGA_outline_x(int x1, int y1, short pixel_color){
    int offset, row, col;
    short *pixel_buffer = (short *)FPGA_ONCHIP_BASE; // pixel buffer
    /* assume that the box coordinates are valid */
	col = y1;
	for (row = x1; row <= x1+29; row++){
     708:	e280c01d 	add	r12, r0, #29
     70c:	e150000c 	cmp	r0, r12
     710:	c12fff1e 	bxgt	lr
		offset = (row << 9) + col;
		*(pixel_buffer + offset) = (short)pixel_color;
     714:	e0813480 	add	r3, r1, r0, lsl #9
     718:	e1a03083 	lsl	r3, r3, #1
     71c:	e2833332 	add	r3, r3, #-939524096	; 0xc8000000
     720:	e1c320b0 	strh	r2, [r3]
void VGA_outline_x(int x1, int y1, short pixel_color){
    int offset, row, col;
    short *pixel_buffer = (short *)FPGA_ONCHIP_BASE; // pixel buffer
    /* assume that the box coordinates are valid */
	col = y1;
	for (row = x1; row <= x1+29; row++){
     724:	e2800001 	add	r0, r0, #1
     728:	e150000c 	cmp	r0, r12
     72c:	dafffff8 	ble	714 <VGA_outline_x+0xc>
     730:	e12fff1e 	bx	lr

00000734 <VGA_outline_y>:
void VGA_outline_y(int x1, int y1, short pixel_color){
    int offset, row, col;
    short *pixel_buffer = (short *)FPGA_ONCHIP_BASE; // pixel buffer
    /* assume that the box coordinates are valid */
	row = x1;
	for (col = y1; col <= y1+29; col++){
     734:	e281c01d 	add	r12, r1, #29
     738:	e151000c 	cmp	r1, r12
     73c:	c12fff1e 	bxgt	lr
	}
}
/*
 * (row, col, color) for a 29 pixel long horizontal line
 */
void VGA_outline_y(int x1, int y1, short pixel_color){
     740:	e0813480 	add	r3, r1, r0, lsl #9
     744:	e1a03083 	lsl	r3, r3, #1
     748:	e243338e 	sub	r3, r3, #939524098	; 0x38000002
    short *pixel_buffer = (short *)FPGA_ONCHIP_BASE; // pixel buffer
    /* assume that the box coordinates are valid */
	row = x1;
	for (col = y1; col <= y1+29; col++){
		offset = (row << 9) + col;
		*(pixel_buffer + offset) = (short)pixel_color;
     74c:	e1e320b2 	strh	r2, [r3, #2]!
void VGA_outline_y(int x1, int y1, short pixel_color){
    int offset, row, col;
    short *pixel_buffer = (short *)FPGA_ONCHIP_BASE; // pixel buffer
    /* assume that the box coordinates are valid */
	row = x1;
	for (col = y1; col <= y1+29; col++){
     750:	e2811001 	add	r1, r1, #1
     754:	e151000c 	cmp	r1, r12
     758:	dafffffb 	ble	74c <VGA_outline_y+0x18>
     75c:	e12fff1e 	bx	lr

00000760 <VGA_text>:
{
	int offset;
	char * character_buffer = (char *)FPGA_CHAR_BASE;	// VGA character buffer

	/* compute offset and set character */
	offset = (y << 7) + x;
     760:	e0801381 	add	r1, r0, r1, lsl #7
	while (*(text_ptr))	// NULL character = end of array
     764:	e5d23000 	ldrb	r3, [r2]
     768:	e3530000 	cmp	r3, #0
     76c:	012fff1e 	bxeq	lr
/***************************************************************
	Function to draw a a string of text (NULL terminated)
	(x, y): coordinate of first character in the character buffer
	resolution of character buffer = 80x60
*************************************************************/
void VGA_text(int x, int y, char * text_ptr)
     770:	e28114c9 	add	r1, r1, #-922746880	; 0xc9000000

	/* compute offset and set character */
	offset = (y << 7) + x;
	while (*(text_ptr))	// NULL character = end of array
	{
		*(character_buffer + offset) = *(text_ptr);
     774:	e4c13001 	strb	r3, [r1], #1
	int offset;
	char * character_buffer = (char *)FPGA_CHAR_BASE;	// VGA character buffer

	/* compute offset and set character */
	offset = (y << 7) + x;
	while (*(text_ptr))	// NULL character = end of array
     778:	e5f23001 	ldrb	r3, [r2, #1]!
     77c:	e3530000 	cmp	r3, #0
     780:	1afffffb 	bne	774 <VGA_text+0x14>
     784:	e12fff1e 	bx	lr

00000788 <VGA_load_image_sdram>:
		++text_ptr;
		++offset;
	}
}
void VGA_load_image_sdram(short int image[][320])
{
     788:	e92d0030 	push	{r4, r5}
	int offset, row, col;
	volatile short * pixel_buffer = (short *)SDRAM_BASE;	//  SRAM buffer
	/* assume that the box coordinates are valid */
	for (row = 0; row <= 239; row++)
     78c:	e3a04000 	mov	r4, #0
		*(character_buffer + offset) = *(text_ptr);
		++text_ptr;
		++offset;
	}
}
void VGA_load_image_sdram(short int image[][320])
     790:	e1a05004 	mov	r5, r4
     794:	ea000008 	b	7bc <VGA_load_image_sdram+0x34>
	for (row = 0; row <= 239; row++)
	{
		for (col = 0; col <= 319; col++)
		{
			offset = (row << 9) + col;						// compute offset 
			*(pixel_buffer + offset) = (short)(image[row][col]);		// set pixel value
     798:	e19c20b3 	ldrh	r2, [r12, r3]
     79c:	e18120b3 	strh	r2, [r1, r3]
     7a0:	e2833002 	add	r3, r3, #2
	int offset, row, col;
	volatile short * pixel_buffer = (short *)SDRAM_BASE;	//  SRAM buffer
	/* assume that the box coordinates are valid */
	for (row = 0; row <= 239; row++)
	{
		for (col = 0; col <= 319; col++)
     7a4:	e3530d0a 	cmp	r3, #640	; 0x280
     7a8:	1afffffa 	bne	798 <VGA_load_image_sdram+0x10>
void VGA_load_image_sdram(short int image[][320])
{
	int offset, row, col;
	volatile short * pixel_buffer = (short *)SDRAM_BASE;	//  SRAM buffer
	/* assume that the box coordinates are valid */
	for (row = 0; row <= 239; row++)
     7ac:	e2844001 	add	r4, r4, #1
     7b0:	e2800d0a 	add	r0, r0, #640	; 0x280
     7b4:	e35400f0 	cmp	r4, #240	; 0xf0
     7b8:	0a000004 	beq	7d0 <VGA_load_image_sdram+0x48>
	{
		for (col = 0; col <= 319; col++)
		{
			offset = (row << 9) + col;						// compute offset 
			*(pixel_buffer + offset) = (short)(image[row][col]);		// set pixel value
     7bc:	e1a0c000 	mov	r12, r0
		*(character_buffer + offset) = *(text_ptr);
		++text_ptr;
		++offset;
	}
}
void VGA_load_image_sdram(short int image[][320])
     7c0:	e1a01504 	lsl	r1, r4, #10
     7c4:	e1a03005 	mov	r3, r5
     7c8:	e2811103 	add	r1, r1, #-1073741824	; 0xc0000000
     7cc:	eafffff1 	b	798 <VGA_load_image_sdram+0x10>
		{
			offset = (row << 9) + col;						// compute offset 
			*(pixel_buffer + offset) = (short)(image[row][col]);		// set pixel value
		}
	}
}
     7d0:	e8bd0030 	pop	{r4, r5}
     7d4:	e12fff1e 	bx	lr

000007d8 <main>:
int findAverage(short int img[][28]);
void findBinIMG(short src_img[][28], int threshold, char dst_img[][28]);
void Write_small_img(int x1, int y1, char image[][28], int base_address);

int main(void)
{
     7d8:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
     7dc:	e24dda26 	sub	sp, sp, #155648	; 0x26000
     7e0:	e24ddf71 	sub	sp, sp, #452	; 0x1c4
	volatile int show_live_video;
	volatile int * LEDR_ptr 		= (int *) LEDR_BASE;
	volatile int * SW_ptr 				= (int *) SW_BASE ;	
	volatile int *HEX3_HEX0_ptr = (int *)HEX3_HEX0_BASE;
	
	int ssd[] = { 0xbf, 0x86, 0xdb, 0xcf, 0xe6, 0xed, 0xfd, 0x87,
     7e4:	e30147ec 	movw	r4, #6124	; 0x17ec
     7e8:	e3404000 	movt	r4, #0
     7ec:	e28d0a26 	add	r0, sp, #155648	; 0x26000
     7f0:	e2800f59 	add	r0, r0, #356	; 0x164
     7f4:	e2841028 	add	r1, r4, #40	; 0x28
     7f8:	e3a02044 	mov	r2, #68	; 0x44
     7fc:	eb00027e 	bl	11fc <memcpy>
				  0xff, 0xef, 0xf7, 0xfc, 0xb9, 0xde, 0xf9, 0xf1, 0x00 }; // patterns for ssd
	
	char text[] = "USNA EC463 MICROCOMPUTER INTERFACING FINAL PROJECT\0";
     800:	e28dca26 	add	r12, sp, #155648	; 0x26000
     804:	e28cce13 	add	r12, r12, #304	; 0x130
     808:	e284e06c 	add	lr, r4, #108	; 0x6c
     80c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     810:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     814:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     818:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     81c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     820:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     824:	e59e3000 	ldr	r3, [lr]
     828:	e58c3000 	str	r3, [r12]
	/* Write a text string to VGA */
	VGA_text(20, 1, text);
     82c:	e3a00014 	mov	r0, #20
     830:	e3a01001 	mov	r1, #1
     834:	e28d2a26 	add	r2, sp, #155648	; 0x26000
     838:	e2822e13 	add	r2, r2, #304	; 0x130
     83c:	ebffffc7 	bl	760 <VGA_text>
	short blue[240][320];
	short int initIMG[28][28]; //Holds the value pulled from the yellow box of the ON_CHIP buffer (Where the number will be)
	short int binIMG[28][28]; //Holds the value for the binarya image based on thresholding value from SW
	char  networkInput[28][28]; //Converted equiv of initIMG to pass to the classifier

	for (row = 0; row <= 239; row++)
     840:	e3a03000 	mov	r3, #0
     844:	e28d1a26 	add	r1, sp, #155648	; 0x26000
     848:	e58131bc 	str	r3, [r1, #444]	; 0x1bc
     84c:	e59131bc 	ldr	r3, [r1, #444]	; 0x1bc
     850:	e35300ef 	cmp	r3, #239	; 0xef
     854:	ca00001f 	bgt	8d8 <main+0x100>
	{
		for (col = 0; col <= 319; col++)
     858:	e3a0e000 	mov	lr, #0
     85c:	e300013f 	movw	r0, #319	; 0x13f
		{
			blue[row][col] = 0x001F;
     860:	e30a1770 	movw	r1, #42864	; 0xa770
     864:	e34f1ffd 	movt	r1, #65533	; 0xfffd
     868:	e3a0c01f 	mov	r12, #31
	short int binIMG[28][28]; //Holds the value for the binarya image based on thresholding value from SW
	char  networkInput[28][28]; //Converted equiv of initIMG to pass to the classifier

	for (row = 0; row <= 239; row++)
	{
		for (col = 0; col <= 319; col++)
     86c:	e28d2a26 	add	r2, sp, #155648	; 0x26000
     870:	e582e1b8 	str	lr, [r2, #440]	; 0x1b8
     874:	e59231b8 	ldr	r3, [r2, #440]	; 0x1b8
     878:	e1530000 	cmp	r3, r0
     87c:	ca00000e 	bgt	8bc <main+0xe4>
		{
			blue[row][col] = 0x001F;
     880:	e28d4a26 	add	r4, sp, #155648	; 0x26000
     884:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
     888:	e59421b8 	ldr	r2, [r4, #440]	; 0x1b8
     88c:	e0833103 	add	r3, r3, r3, lsl #2
     890:	e0823303 	add	r3, r2, r3, lsl #6
     894:	e28d2a26 	add	r2, sp, #155648	; 0x26000
     898:	e2822d07 	add	r2, r2, #448	; 0x1c0
     89c:	e0823083 	add	r3, r2, r3, lsl #1
     8a0:	e183c0b1 	strh	r12, [r3, r1]
	short int binIMG[28][28]; //Holds the value for the binarya image based on thresholding value from SW
	char  networkInput[28][28]; //Converted equiv of initIMG to pass to the classifier

	for (row = 0; row <= 239; row++)
	{
		for (col = 0; col <= 319; col++)
     8a4:	e59431b8 	ldr	r3, [r4, #440]	; 0x1b8
     8a8:	e2833001 	add	r3, r3, #1
     8ac:	e58431b8 	str	r3, [r4, #440]	; 0x1b8
     8b0:	e59431b8 	ldr	r3, [r4, #440]	; 0x1b8
     8b4:	e1530000 	cmp	r3, r0
     8b8:	dafffff0 	ble	880 <main+0xa8>
	short blue[240][320];
	short int initIMG[28][28]; //Holds the value pulled from the yellow box of the ON_CHIP buffer (Where the number will be)
	short int binIMG[28][28]; //Holds the value for the binarya image based on thresholding value from SW
	char  networkInput[28][28]; //Converted equiv of initIMG to pass to the classifier

	for (row = 0; row <= 239; row++)
     8bc:	e28d4a26 	add	r4, sp, #155648	; 0x26000
     8c0:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
     8c4:	e2833001 	add	r3, r3, #1
     8c8:	e58431bc 	str	r3, [r4, #444]	; 0x1bc
     8cc:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
     8d0:	e35300ef 	cmp	r3, #239	; 0xef
     8d4:	daffffe4 	ble	86c <main+0x94>
		for (col = 0; col <= 319; col++)
		{
			blue[row][col] = 0x001F;
		}
	}
	row = 0;
     8d8:	e3a03000 	mov	r3, #0
     8dc:	e28d1a26 	add	r1, sp, #155648	; 0x26000
     8e0:	e58131bc 	str	r3, [r1, #444]	; 0x1bc
	col = 0;
     8e4:	e58131b8 	str	r3, [r1, #440]	; 0x1b8
	
	// Intialize SDRAM buffer to a blue image
	VGA_load_image_sdram(blue);
     8e8:	e28d0e93 	add	r0, sp, #2352	; 0x930
     8ec:	ebffffa5 	bl	788 <VGA_load_image_sdram>
	
	// Initialize Video in and VGA interfaces	
	*(VIDEO_IN_CONTROL_ptr + 3)  = (1<<2);			// enable live video --> frame = on-chip buffer by default
     8f0:	e3033fff 	movw	r3, #16383	; 0x3fff
     8f4:	e34f3f20 	movt	r3, #65312	; 0xff20
     8f8:	e3a02004 	mov	r2, #4
     8fc:	e5032f93 	str	r2, [r3, #-3987]	; 0xfffff06d
	*(VGA_DMA_CONTROL_ptr + 1) = FPGA_ONCHIP_BASE; 	// live video input will be shown on VGA
     900:	e3a02332 	mov	r2, #-939524096	; 0xc8000000
     904:	e5032fdb 	str	r2, [r3, #-4059]	; 0xfffff025
	*(VGA_DMA_CONTROL_ptr + 0) = 1;
     908:	e3a02001 	mov	r2, #1
     90c:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	show_live_video = 1;
     910:	e28d3a26 	add	r3, sp, #155648	; 0x26000
     914:	e58321a8 	str	r2, [r3, #424]	; 0x1a8
	
	while(1)
	{	
		// if KEY(3) is detected, enable or disable (toggle) the video in interface
		if (*(KEY_ptr + 3) & 0x08){					// if KEY(3) is detected
     918:	e3a04000 	mov	r4, #0
     91c:	e34f4f20 	movt	r4, #65312	; 0xff20
			VGA_loadInit(117,140,initIMG);	// Draw the internal image to SDRAM
			
			avg = findAverage(initIMG);		// find average intensity of the internal image
			*LEDR_ptr   = avg;				// show avg value on red LEDs
		
			Write_small_img(0, 10, Image1, FPGA_ONCHIP_BASE);
     920:	e30158f0 	movw	r5, #6384	; 0x18f0
     924:	e3405000 	movt	r5, #0
			Write_small_img(0, 10, Image1, SDRAM_BASE);
			Write_small_img(30, 10, Image2, SDRAM_BASE);
     928:	e285ae31 	add	r10, r5, #784	; 0x310
			Write_small_img(60, 10, Image3, SDRAM_BASE);
			Write_small_img(90, 10, Image4, SDRAM_BASE);
			Write_small_img(120, 10, Image5, SDRAM_BASE);
			Write_small_img(150, 10, Image6, SDRAM_BASE);
			Write_small_img(180, 10, Image7, SDRAM_BASE);
     92c:	e30378e8 	movw	r7, #14568	; 0x38e8
     930:	e3407000 	movt	r7, #0
     934:	e2478ed9 	sub	r8, r7, #3472	; 0xd90
     938:	e2488008 	sub	r8, r8, #8
	show_live_video = 1;
	
	while(1)
	{	
		// if KEY(3) is detected, enable or disable (toggle) the video in interface
		if (*(KEY_ptr + 3) & 0x08){					// if KEY(3) is detected
     93c:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
     940:	e3130008 	tst	r3, #8
     944:	0a000019 	beq	9b0 <main+0x1d8>
		
			*(VIDEO_IN_CONTROL_ptr + 3)  ^= (1<<2);	// toggle (enable/disable) video_in
     948:	e3033fff 	movw	r3, #16383	; 0x3fff
     94c:	e34f3f20 	movt	r3, #65312	; 0xff20
     950:	e5132f93 	ldr	r2, [r3, #-3987]	; 0xfffff06d
     954:	e2222004 	eor	r2, r2, #4
     958:	e5032f93 	str	r2, [r3, #-3987]	; 0xfffff06d
			
			//Create an outline around an area when you disable the camera. Used to convert camera into NN input
			//YELLOW in 24 bit RGB is 225, 231, 16 -> weights of 0.87890625,0.90234375,0.0625 -> 28,58,2 -> 0xE742
			VGA_outline_x(105,145,0xe742); //Left side of the square
     95c:	e30e6742 	movw	r6, #59202	; 0xe742
     960:	e34f6fff 	movt	r6, #65535	; 0xffff
     964:	e3a00069 	mov	r0, #105	; 0x69
     968:	e3a01091 	mov	r1, #145	; 0x91
     96c:	e1a02006 	mov	r2, r6
     970:	ebffff64 	bl	708 <VGA_outline_x>
			VGA_outline_y(105,146,0xe742); //Top of the square
     974:	e3a00069 	mov	r0, #105	; 0x69
     978:	e3a01092 	mov	r1, #146	; 0x92
     97c:	e1a02006 	mov	r2, r6
     980:	ebffff6b 	bl	734 <VGA_outline_y>
			VGA_outline_y(135,146,0xe742);
     984:	e3a00087 	mov	r0, #135	; 0x87
     988:	e3a01092 	mov	r1, #146	; 0x92
     98c:	e1a02006 	mov	r2, r6
     990:	ebffff67 	bl	734 <VGA_outline_y>
			VGA_outline_x(106,174,0xe742);
     994:	e3a0006a 	mov	r0, #106	; 0x6a
     998:	e3a010ae 	mov	r1, #174	; 0xae
     99c:	e1a02006 	mov	r2, r6
     9a0:	ebffff58 	bl	708 <VGA_outline_x>
			
			
			*(KEY_ptr + 3) = (1 << 3); 				// clear flag for KEY(3)
     9a4:	e3a03008 	mov	r3, #8
     9a8:	e584305c 	str	r3, [r4, #92]	; 0x5c
     9ac:	eaffffe2 	b	93c <main+0x164>
		}
		
		// if KEY(2) is detected, swap buffers for VGA display
		else if (*(KEY_ptr + 3) & 0x04)	{	// if KEY(2) is detected
     9b0:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
     9b4:	e3130004 	tst	r3, #4
     9b8:	0a000057 	beq	b1c <main+0x344>
			
			show_live_video ^= 1;
     9bc:	e28d1a26 	add	r1, sp, #155648	; 0x26000
     9c0:	e59131a8 	ldr	r3, [r1, #424]	; 0x1a8
     9c4:	e2233001 	eor	r3, r3, #1
     9c8:	e58131a8 	str	r3, [r1, #424]	; 0x1a8
			if (show_live_video)
     9cc:	e59131a8 	ldr	r3, [r1, #424]	; 0x1a8
     9d0:	e3530000 	cmp	r3, #0
			{
				*(VGA_DMA_CONTROL_ptr + 1) = (int)FPGA_ONCHIP_BASE;
     9d4:	e3033fff 	movw	r3, #16383	; 0x3fff
     9d8:	e34f3f20 	movt	r3, #65312	; 0xff20
     9dc:	13a02332 	movne	r2, #-939524096	; 0xc8000000
			}
			else
			{
				*(VGA_DMA_CONTROL_ptr + 1) = (int)SDRAM_BASE;
     9e0:	03a02103 	moveq	r2, #-1073741824	; 0xc0000000
     9e4:	e5032fdb 	str	r2, [r3, #-4059]	; 0xfffff025
			}
			*(VGA_DMA_CONTROL_ptr + 0) = 1;
     9e8:	e3033fff 	movw	r3, #16383	; 0x3fff
     9ec:	e34f3f20 	movt	r3, #65312	; 0xff20
     9f0:	e3a02001 	mov	r2, #1
     9f4:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
			
			CopyInput(initIMG);				// copy current box to internal image initIMG
     9f8:	e28d0e31 	add	r0, sp, #784	; 0x310
     9fc:	ebfffe80 	bl	404 <CopyInput>
			VGA_loadInit(117,140,initIMG);	// Draw the internal image to SDRAM
     a00:	e3a00075 	mov	r0, #117	; 0x75
     a04:	e3a0108c 	mov	r1, #140	; 0x8c
     a08:	e28d2e31 	add	r2, sp, #784	; 0x310
     a0c:	ebfffe90 	bl	454 <VGA_loadInit>
			
			avg = findAverage(initIMG);		// find average intensity of the internal image
     a10:	e28d0e31 	add	r0, sp, #784	; 0x310
     a14:	ebfffeaa 	bl	4c4 <findAverage>
     a18:	e28d2a26 	add	r2, sp, #155648	; 0x26000
     a1c:	e58201b4 	str	r0, [r2, #436]	; 0x1b4
			*LEDR_ptr   = avg;				// show avg value on red LEDs
     a20:	e59231b4 	ldr	r3, [r2, #436]	; 0x1b4
     a24:	e5843000 	str	r3, [r4]
		
			Write_small_img(0, 10, Image1, FPGA_ONCHIP_BASE);
     a28:	e3a00000 	mov	r0, #0
     a2c:	e3a0100a 	mov	r1, #10
     a30:	e1a02005 	mov	r2, r5
     a34:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     a38:	ebfffe4f 	bl	37c <Write_small_img>
			Write_small_img(0, 10, Image1, SDRAM_BASE);
     a3c:	e3a00000 	mov	r0, #0
     a40:	e3a0100a 	mov	r1, #10
     a44:	e1a02005 	mov	r2, r5
     a48:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     a4c:	ebfffe4a 	bl	37c <Write_small_img>
			Write_small_img(30, 10, Image2, SDRAM_BASE);
     a50:	e3a0001e 	mov	r0, #30
     a54:	e3a0100a 	mov	r1, #10
     a58:	e1a0200a 	mov	r2, r10
     a5c:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     a60:	ebfffe45 	bl	37c <Write_small_img>
			Write_small_img(60, 10, Image3, SDRAM_BASE);
     a64:	e3a0003c 	mov	r0, #60	; 0x3c
     a68:	e3a0100a 	mov	r1, #10
     a6c:	e2852e62 	add	r2, r5, #1568	; 0x620
     a70:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     a74:	ebfffe40 	bl	37c <Write_small_img>
			Write_small_img(90, 10, Image4, SDRAM_BASE);
     a78:	e3a0005a 	mov	r0, #90	; 0x5a
     a7c:	e3a0100a 	mov	r1, #10
     a80:	e2852e93 	add	r2, r5, #2352	; 0x930
     a84:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     a88:	ebfffe3b 	bl	37c <Write_small_img>
			Write_small_img(120, 10, Image5, SDRAM_BASE);
     a8c:	e3a00078 	mov	r0, #120	; 0x78
     a90:	e3a0100a 	mov	r1, #10
     a94:	e2852d31 	add	r2, r5, #3136	; 0xc40
     a98:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     a9c:	ebfffe36 	bl	37c <Write_small_img>
			Write_small_img(150, 10, Image6, SDRAM_BASE);
     aa0:	e3a00096 	mov	r0, #150	; 0x96
     aa4:	e3a0100a 	mov	r1, #10
     aa8:	e2852ef5 	add	r2, r5, #3920	; 0xf50
     aac:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     ab0:	ebfffe31 	bl	37c <Write_small_img>
			Write_small_img(180, 10, Image7, SDRAM_BASE);
     ab4:	e3a000b4 	mov	r0, #180	; 0xb4
     ab8:	e3a0100a 	mov	r1, #10
     abc:	e1a02008 	mov	r2, r8
     ac0:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     ac4:	ebfffe2c 	bl	37c <Write_small_img>
			Write_small_img(210, 10, Image8, SDRAM_BASE);
     ac8:	e2472d2a 	sub	r2, r7, #2688	; 0xa80
     acc:	e3a000d2 	mov	r0, #210	; 0xd2
     ad0:	e3a0100a 	mov	r1, #10
     ad4:	e2422008 	sub	r2, r2, #8
     ad8:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     adc:	ebfffe26 	bl	37c <Write_small_img>
			Write_small_img(240, 10, Image9, SDRAM_BASE);
     ae0:	e2472e77 	sub	r2, r7, #1904	; 0x770
     ae4:	e3a000f0 	mov	r0, #240	; 0xf0
     ae8:	e3a0100a 	mov	r1, #10
     aec:	e2422008 	sub	r2, r2, #8
     af0:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     af4:	ebfffe20 	bl	37c <Write_small_img>
			Write_small_img(270, 10, Image10, SDRAM_BASE);
     af8:	e2472e46 	sub	r2, r7, #1120	; 0x460
     afc:	e300010e 	movw	r0, #270	; 0x10e
     b00:	e3a0100a 	mov	r1, #10
     b04:	e2422008 	sub	r2, r2, #8
     b08:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     b0c:	ebfffe1a 	bl	37c <Write_small_img>
			
			*(KEY_ptr + 3) = (1 << 2);  // clear flag for KEY(2)
     b10:	e3a03004 	mov	r3, #4
     b14:	e584305c 	str	r3, [r4, #92]	; 0x5c
     b18:	eaffff87 	b	93c <main+0x164>
		}
		
		// if KEY(1) is detected, swap buffers for VGA display
		else if (*(KEY_ptr + 3) & 0x02)	{	// if KEY(1) is detected
     b1c:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
     b20:	e3130002 	tst	r3, #2
     b24:	0affff84 	beq	93c <main+0x164>
			
			threshold  = (*SW_ptr) & 0xFF;	// 8-bit threshold value
     b28:	e5943040 	ldr	r3, [r4, #64]	; 0x40
     b2c:	e6ef3073 	uxtb	r3, r3
     b30:	e28d1a26 	add	r1, sp, #155648	; 0x26000
     b34:	e58131b0 	str	r3, [r1, #432]	; 0x1b0
			findBinIMG( initIMG, threshold, networkInput);	// find binary (8-bit and 16-bit) images
     b38:	e59111b0 	ldr	r1, [r1, #432]	; 0x1b0
     b3c:	e28d0e31 	add	r0, sp, #784	; 0x310
     b40:	e1a0200d 	mov	r2, sp
     b44:	ebfffea8 	bl	5ec <findBinIMG>
			Write_small_img(150, 140, networkInput, SDRAM_BASE);
     b48:	e3a00096 	mov	r0, #150	; 0x96
     b4c:	e3a0108c 	mov	r1, #140	; 0x8c
     b50:	e1a0200d 	mov	r2, sp
     b54:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     b58:	ebfffe07 	bl	37c <Write_small_img>
			num = classify(networkInput);
     b5c:	e1a0000d 	mov	r0, sp
     b60:	ebfffdcf 	bl	2a4 <classify>
     b64:	e28d3a26 	add	r3, sp, #155648	; 0x26000
     b68:	e58301ac 	str	r0, [r3, #428]	; 0x1ac
			*HEX3_HEX0_ptr = (ssd[16] << 24) + (ssd[16] << 16)+ (ssd[16] << 8) + (ssd[num]);
     b6c:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
     b70:	e28d1a26 	add	r1, sp, #155648	; 0x26000
     b74:	e59121ac 	ldr	r2, [r1, #428]	; 0x1ac
     b78:	e1a01803 	lsl	r1, r3, #16
     b7c:	e0811c03 	add	r1, r1, r3, lsl #24
     b80:	e0813403 	add	r3, r1, r3, lsl #8
     b84:	e28d1a26 	add	r1, sp, #155648	; 0x26000
     b88:	e2811d07 	add	r1, r1, #448	; 0x1c0
     b8c:	e0812102 	add	r2, r1, r2, lsl #2
     b90:	e512205c 	ldr	r2, [r2, #-92]	; 0xffffffa4
     b94:	e0833002 	add	r3, r3, r2
     b98:	e5843020 	str	r3, [r4, #32]
			*(KEY_ptr + 3) = (1 << 1);		// clear flag for KEY(1)
     b9c:	e3a03002 	mov	r3, #2
     ba0:	e584305c 	str	r3, [r4, #92]	; 0x5c
     ba4:	eaffff64 	b	93c <main+0x164>

00000ba8 <__aeabi_frsub>:
     ba8:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
     bac:	ea000000 	b	bb4 <__addsf3>

00000bb0 <__aeabi_fsub>:
     bb0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00000bb4 <__addsf3>:
     bb4:	e1b02080 	lsls	r2, r0, #1
     bb8:	11b03081 	lslsne	r3, r1, #1
     bbc:	11320003 	teqne	r2, r3
     bc0:	11f0cc42 	mvnsne	r12, r2, asr #24
     bc4:	11f0cc43 	mvnsne	r12, r3, asr #24
     bc8:	0a000047 	beq	cec <__addsf3+0x138>
     bcc:	e1a02c22 	lsr	r2, r2, #24
     bd0:	e0723c23 	rsbs	r3, r2, r3, lsr #24
     bd4:	c0822003 	addgt	r2, r2, r3
     bd8:	c0201001 	eorgt	r1, r0, r1
     bdc:	c0210000 	eorgt	r0, r1, r0
     be0:	c0201001 	eorgt	r1, r0, r1
     be4:	b2633000 	rsblt	r3, r3, #0
     be8:	e3530019 	cmp	r3, #25
     bec:	812fff1e 	bxhi	lr
     bf0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
     bf4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     bf8:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
     bfc:	12600000 	rsbne	r0, r0, #0
     c00:	e3110102 	tst	r1, #-2147483648	; 0x80000000
     c04:	e3811502 	orr	r1, r1, #8388608	; 0x800000
     c08:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
     c0c:	12611000 	rsbne	r1, r1, #0
     c10:	e1320003 	teq	r2, r3
     c14:	0a00002e 	beq	cd4 <__addsf3+0x120>
     c18:	e2422001 	sub	r2, r2, #1
     c1c:	e0900351 	adds	r0, r0, r1, asr r3
     c20:	e2633020 	rsb	r3, r3, #32
     c24:	e1a01311 	lsl	r1, r1, r3
     c28:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
     c2c:	5a000001 	bpl	c38 <__addsf3+0x84>
     c30:	e2711000 	rsbs	r1, r1, #0
     c34:	e2e00000 	rsc	r0, r0, #0
     c38:	e3500502 	cmp	r0, #8388608	; 0x800000
     c3c:	3a00000b 	bcc	c70 <__addsf3+0xbc>
     c40:	e3500401 	cmp	r0, #16777216	; 0x1000000
     c44:	3a000004 	bcc	c5c <__addsf3+0xa8>
     c48:	e1b000a0 	lsrs	r0, r0, #1
     c4c:	e1a01061 	rrx	r1, r1
     c50:	e2822001 	add	r2, r2, #1
     c54:	e35200fe 	cmp	r2, #254	; 0xfe
     c58:	2a000038 	bcs	d40 <__addsf3+0x18c>
     c5c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
     c60:	e0a00b82 	adc	r0, r0, r2, lsl #23
     c64:	03c00001 	biceq	r0, r0, #1
     c68:	e1800003 	orr	r0, r0, r3
     c6c:	e12fff1e 	bx	lr
     c70:	e1b01081 	lsls	r1, r1, #1
     c74:	e0a00000 	adc	r0, r0, r0
     c78:	e3100502 	tst	r0, #8388608	; 0x800000
     c7c:	e2422001 	sub	r2, r2, #1
     c80:	1afffff5 	bne	c5c <__addsf3+0xa8>
     c84:	e1b0c620 	lsrs	r12, r0, #12
     c88:	01a00600 	lsleq	r0, r0, #12
     c8c:	0242200c 	subeq	r2, r2, #12
     c90:	e31008ff 	tst	r0, #16711680	; 0xff0000
     c94:	01a00400 	lsleq	r0, r0, #8
     c98:	02422008 	subeq	r2, r2, #8
     c9c:	e310060f 	tst	r0, #15728640	; 0xf00000
     ca0:	01a00200 	lsleq	r0, r0, #4
     ca4:	02422004 	subeq	r2, r2, #4
     ca8:	e3100503 	tst	r0, #12582912	; 0xc00000
     cac:	01a00100 	lsleq	r0, r0, #2
     cb0:	02422002 	subeq	r2, r2, #2
     cb4:	e3500502 	cmp	r0, #8388608	; 0x800000
     cb8:	31a00080 	lslcc	r0, r0, #1
     cbc:	e2d22000 	sbcs	r2, r2, #0
     cc0:	a0800b82 	addge	r0, r0, r2, lsl #23
     cc4:	b2622000 	rsblt	r2, r2, #0
     cc8:	a1800003 	orrge	r0, r0, r3
     ccc:	b1830230 	orrlt	r0, r3, r0, lsr r2
     cd0:	e12fff1e 	bx	lr
     cd4:	e3320000 	teq	r2, #0
     cd8:	e2211502 	eor	r1, r1, #8388608	; 0x800000
     cdc:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
     ce0:	02822001 	addeq	r2, r2, #1
     ce4:	12433001 	subne	r3, r3, #1
     ce8:	eaffffca 	b	c18 <__addsf3+0x64>
     cec:	e1a03081 	lsl	r3, r1, #1
     cf0:	e1f0cc42 	mvns	r12, r2, asr #24
     cf4:	11f0cc43 	mvnsne	r12, r3, asr #24
     cf8:	0a000013 	beq	d4c <__addsf3+0x198>
     cfc:	e1320003 	teq	r2, r3
     d00:	0a000002 	beq	d10 <__addsf3+0x15c>
     d04:	e3320000 	teq	r2, #0
     d08:	01a00001 	moveq	r0, r1
     d0c:	e12fff1e 	bx	lr
     d10:	e1300001 	teq	r0, r1
     d14:	13a00000 	movne	r0, #0
     d18:	112fff1e 	bxne	lr
     d1c:	e31204ff 	tst	r2, #-16777216	; 0xff000000
     d20:	1a000002 	bne	d30 <__addsf3+0x17c>
     d24:	e1b00080 	lsls	r0, r0, #1
     d28:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
     d2c:	e12fff1e 	bx	lr
     d30:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
     d34:	32800502 	addcc	r0, r0, #8388608	; 0x800000
     d38:	312fff1e 	bxcc	lr
     d3c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
     d40:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
     d44:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     d48:	e12fff1e 	bx	lr
     d4c:	e1f02c42 	mvns	r2, r2, asr #24
     d50:	11a00001 	movne	r0, r1
     d54:	01f03c43 	mvnseq	r3, r3, asr #24
     d58:	11a01000 	movne	r1, r0
     d5c:	e1b02480 	lsls	r2, r0, #9
     d60:	01b03481 	lslseq	r3, r1, #9
     d64:	01300001 	teqeq	r0, r1
     d68:	13800501 	orrne	r0, r0, #4194304	; 0x400000
     d6c:	e12fff1e 	bx	lr

00000d70 <__aeabi_ui2f>:
     d70:	e3a03000 	mov	r3, #0
     d74:	ea000001 	b	d80 <__aeabi_i2f+0x8>

00000d78 <__aeabi_i2f>:
     d78:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
     d7c:	42600000 	rsbmi	r0, r0, #0
     d80:	e1b0c000 	movs	r12, r0
     d84:	012fff1e 	bxeq	lr
     d88:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
     d8c:	e1a01000 	mov	r1, r0
     d90:	e3a00000 	mov	r0, #0
     d94:	ea00000f 	b	dd8 <__aeabi_l2f+0x30>

00000d98 <__aeabi_ul2f>:
     d98:	e1902001 	orrs	r2, r0, r1
     d9c:	012fff1e 	bxeq	lr
     da0:	e3a03000 	mov	r3, #0
     da4:	ea000005 	b	dc0 <__aeabi_l2f+0x18>

00000da8 <__aeabi_l2f>:
     da8:	e1902001 	orrs	r2, r0, r1
     dac:	012fff1e 	bxeq	lr
     db0:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
     db4:	5a000001 	bpl	dc0 <__aeabi_l2f+0x18>
     db8:	e2700000 	rsbs	r0, r0, #0
     dbc:	e2e11000 	rsc	r1, r1, #0
     dc0:	e1b0c001 	movs	r12, r1
     dc4:	01a0c000 	moveq	r12, r0
     dc8:	01a01000 	moveq	r1, r0
     dcc:	03a00000 	moveq	r0, #0
     dd0:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
     dd4:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
     dd8:	e2433502 	sub	r3, r3, #8388608	; 0x800000
     ddc:	e3a02017 	mov	r2, #23
     de0:	e35c0801 	cmp	r12, #65536	; 0x10000
     de4:	21a0c82c 	lsrcs	r12, r12, #16
     de8:	22422010 	subcs	r2, r2, #16
     dec:	e35c0c01 	cmp	r12, #256	; 0x100
     df0:	21a0c42c 	lsrcs	r12, r12, #8
     df4:	22422008 	subcs	r2, r2, #8
     df8:	e35c0010 	cmp	r12, #16
     dfc:	21a0c22c 	lsrcs	r12, r12, #4
     e00:	22422004 	subcs	r2, r2, #4
     e04:	e35c0004 	cmp	r12, #4
     e08:	22422002 	subcs	r2, r2, #2
     e0c:	304220ac 	subcc	r2, r2, r12, lsr #1
     e10:	e05221ac 	subs	r2, r2, r12, lsr #3
     e14:	e0433b82 	sub	r3, r3, r2, lsl #23
     e18:	ba000006 	blt	e38 <__aeabi_l2f+0x90>
     e1c:	e0833211 	add	r3, r3, r1, lsl r2
     e20:	e1a0c210 	lsl	r12, r0, r2
     e24:	e2622020 	rsb	r2, r2, #32
     e28:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
     e2c:	e0a30230 	adc	r0, r3, r0, lsr r2
     e30:	03c00001 	biceq	r0, r0, #1
     e34:	e12fff1e 	bx	lr
     e38:	e2822020 	add	r2, r2, #32
     e3c:	e1a0c211 	lsl	r12, r1, r2
     e40:	e2622020 	rsb	r2, r2, #32
     e44:	e190008c 	orrs	r0, r0, r12, lsl #1
     e48:	e0a30231 	adc	r0, r3, r1, lsr r2
     e4c:	01c00fac 	biceq	r0, r0, r12, lsr #31
     e50:	e12fff1e 	bx	lr

00000e54 <__aeabi_fmul>:
     e54:	e3a0c0ff 	mov	r12, #255	; 0xff
     e58:	e01c2ba0 	ands	r2, r12, r0, lsr #23
     e5c:	101c3ba1 	andsne	r3, r12, r1, lsr #23
     e60:	1132000c 	teqne	r2, r12
     e64:	1133000c 	teqne	r3, r12
     e68:	0a00003e 	beq	f68 <__aeabi_fmul+0x114>
     e6c:	e0822003 	add	r2, r2, r3
     e70:	e020c001 	eor	r12, r0, r1
     e74:	e1b00480 	lsls	r0, r0, #9
     e78:	11b01481 	lslsne	r1, r1, #9
     e7c:	0a000010 	beq	ec4 <__aeabi_fmul+0x70>
     e80:	e3a03302 	mov	r3, #134217728	; 0x8000000
     e84:	e18302a0 	orr	r0, r3, r0, lsr #5
     e88:	e18312a1 	orr	r1, r3, r1, lsr #5
     e8c:	e0813190 	umull	r3, r1, r0, r1
     e90:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
     e94:	e3510502 	cmp	r1, #8388608	; 0x800000
     e98:	31a01081 	lslcc	r1, r1, #1
     e9c:	31811fa3 	orrcc	r1, r1, r3, lsr #31
     ea0:	31a03083 	lslcc	r3, r3, #1
     ea4:	e1800001 	orr	r0, r0, r1
     ea8:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
     eac:	e35200fd 	cmp	r2, #253	; 0xfd
     eb0:	8a00000f 	bhi	ef4 <__aeabi_fmul+0xa0>
     eb4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
     eb8:	e0a00b82 	adc	r0, r0, r2, lsl #23
     ebc:	03c00001 	biceq	r0, r0, #1
     ec0:	e12fff1e 	bx	lr
     ec4:	e3300000 	teq	r0, #0
     ec8:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
     ecc:	01a01481 	lsleq	r1, r1, #9
     ed0:	e18c04a0 	orr	r0, r12, r0, lsr #9
     ed4:	e18004a1 	orr	r0, r0, r1, lsr #9
     ed8:	e252207f 	subs	r2, r2, #127	; 0x7f
     edc:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
     ee0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
     ee4:	c12fff1e 	bxgt	lr
     ee8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     eec:	e3a03000 	mov	r3, #0
     ef0:	e2522001 	subs	r2, r2, #1
     ef4:	ca000035 	bgt	fd0 <__aeabi_fmul+0x17c>
     ef8:	e3720019 	cmn	r2, #25
     efc:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
     f00:	d12fff1e 	bxle	lr
     f04:	e2622000 	rsb	r2, r2, #0
     f08:	e1b01080 	lsls	r1, r0, #1
     f0c:	e1a01231 	lsr	r1, r1, r2
     f10:	e2622020 	rsb	r2, r2, #32
     f14:	e1a0c210 	lsl	r12, r0, r2
     f18:	e1b00061 	rrxs	r0, r1
     f1c:	e2a00000 	adc	r0, r0, #0
     f20:	e193308c 	orrs	r3, r3, r12, lsl #1
     f24:	01c00fac 	biceq	r0, r0, r12, lsr #31
     f28:	e12fff1e 	bx	lr
     f2c:	e3320000 	teq	r2, #0
     f30:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
     f34:	01a00080 	lsleq	r0, r0, #1
     f38:	03100502 	tsteq	r0, #8388608	; 0x800000
     f3c:	02422001 	subeq	r2, r2, #1
     f40:	0afffffb 	beq	f34 <__aeabi_fmul+0xe0>
     f44:	e180000c 	orr	r0, r0, r12
     f48:	e3330000 	teq	r3, #0
     f4c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
     f50:	01a01081 	lsleq	r1, r1, #1
     f54:	03110502 	tsteq	r1, #8388608	; 0x800000
     f58:	02433001 	subeq	r3, r3, #1
     f5c:	0afffffb 	beq	f50 <__aeabi_fmul+0xfc>
     f60:	e181100c 	orr	r1, r1, r12
     f64:	eaffffc0 	b	e6c <__aeabi_fmul+0x18>
     f68:	e00c3ba1 	and	r3, r12, r1, lsr #23
     f6c:	e132000c 	teq	r2, r12
     f70:	1133000c 	teqne	r3, r12
     f74:	0a000005 	beq	f90 <__aeabi_fmul+0x13c>
     f78:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
     f7c:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
     f80:	1affffe9 	bne	f2c <__aeabi_fmul+0xd8>
     f84:	e0200001 	eor	r0, r0, r1
     f88:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
     f8c:	e12fff1e 	bx	lr
     f90:	e3300000 	teq	r0, #0
     f94:	13300102 	teqne	r0, #-2147483648	; 0x80000000
     f98:	01a00001 	moveq	r0, r1
     f9c:	13310000 	teqne	r1, #0
     fa0:	13310102 	teqne	r1, #-2147483648	; 0x80000000
     fa4:	0a00000d 	beq	fe0 <__aeabi_fmul+0x18c>
     fa8:	e132000c 	teq	r2, r12
     fac:	1a000001 	bne	fb8 <__aeabi_fmul+0x164>
     fb0:	e1b02480 	lsls	r2, r0, #9
     fb4:	1a000009 	bne	fe0 <__aeabi_fmul+0x18c>
     fb8:	e133000c 	teq	r3, r12
     fbc:	1a000002 	bne	fcc <__aeabi_fmul+0x178>
     fc0:	e1b03481 	lsls	r3, r1, #9
     fc4:	11a00001 	movne	r0, r1
     fc8:	1a000004 	bne	fe0 <__aeabi_fmul+0x18c>
     fcc:	e0200001 	eor	r0, r0, r1
     fd0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
     fd4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
     fd8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
     fdc:	e12fff1e 	bx	lr
     fe0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
     fe4:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
     fe8:	e12fff1e 	bx	lr

00000fec <__aeabi_fdiv>:
     fec:	e3a0c0ff 	mov	r12, #255	; 0xff
     ff0:	e01c2ba0 	ands	r2, r12, r0, lsr #23
     ff4:	101c3ba1 	andsne	r3, r12, r1, lsr #23
     ff8:	1132000c 	teqne	r2, r12
     ffc:	1133000c 	teqne	r3, r12
    1000:	0a00003a 	beq	10f0 <__aeabi_fdiv+0x104>
    1004:	e0422003 	sub	r2, r2, r3
    1008:	e020c001 	eor	r12, r0, r1
    100c:	e1b01481 	lsls	r1, r1, #9
    1010:	e1a00480 	lsl	r0, r0, #9
    1014:	0a00001c 	beq	108c <__aeabi_fdiv+0xa0>
    1018:	e3a03201 	mov	r3, #268435456	; 0x10000000
    101c:	e1831221 	orr	r1, r3, r1, lsr #4
    1020:	e1833220 	orr	r3, r3, r0, lsr #4
    1024:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    1028:	e1530001 	cmp	r3, r1
    102c:	31a03083 	lslcc	r3, r3, #1
    1030:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    1034:	e3a0c502 	mov	r12, #8388608	; 0x800000
    1038:	e1530001 	cmp	r3, r1
    103c:	20433001 	subcs	r3, r3, r1
    1040:	2180000c 	orrcs	r0, r0, r12
    1044:	e15300a1 	cmp	r3, r1, lsr #1
    1048:	204330a1 	subcs	r3, r3, r1, lsr #1
    104c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1050:	e1530121 	cmp	r3, r1, lsr #2
    1054:	20433121 	subcs	r3, r3, r1, lsr #2
    1058:	2180012c 	orrcs	r0, r0, r12, lsr #2
    105c:	e15301a1 	cmp	r3, r1, lsr #3
    1060:	204331a1 	subcs	r3, r3, r1, lsr #3
    1064:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1068:	e1b03203 	lsls	r3, r3, #4
    106c:	11b0c22c 	lsrsne	r12, r12, #4
    1070:	1afffff0 	bne	1038 <__aeabi_fdiv+0x4c>
    1074:	e35200fd 	cmp	r2, #253	; 0xfd
    1078:	8affff9d 	bhi	ef4 <__aeabi_fmul+0xa0>
    107c:	e1530001 	cmp	r3, r1
    1080:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1084:	03c00001 	biceq	r0, r0, #1
    1088:	e12fff1e 	bx	lr
    108c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    1090:	e18c04a0 	orr	r0, r12, r0, lsr #9
    1094:	e292207f 	adds	r2, r2, #127	; 0x7f
    1098:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    109c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    10a0:	c12fff1e 	bxgt	lr
    10a4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    10a8:	e3a03000 	mov	r3, #0
    10ac:	e2522001 	subs	r2, r2, #1
    10b0:	eaffff8f 	b	ef4 <__aeabi_fmul+0xa0>
    10b4:	e3320000 	teq	r2, #0
    10b8:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    10bc:	01a00080 	lsleq	r0, r0, #1
    10c0:	03100502 	tsteq	r0, #8388608	; 0x800000
    10c4:	02422001 	subeq	r2, r2, #1
    10c8:	0afffffb 	beq	10bc <__aeabi_fdiv+0xd0>
    10cc:	e180000c 	orr	r0, r0, r12
    10d0:	e3330000 	teq	r3, #0
    10d4:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    10d8:	01a01081 	lsleq	r1, r1, #1
    10dc:	03110502 	tsteq	r1, #8388608	; 0x800000
    10e0:	02433001 	subeq	r3, r3, #1
    10e4:	0afffffb 	beq	10d8 <__aeabi_fdiv+0xec>
    10e8:	e181100c 	orr	r1, r1, r12
    10ec:	eaffffc4 	b	1004 <__aeabi_fdiv+0x18>
    10f0:	e00c3ba1 	and	r3, r12, r1, lsr #23
    10f4:	e132000c 	teq	r2, r12
    10f8:	1a000005 	bne	1114 <__aeabi_fdiv+0x128>
    10fc:	e1b02480 	lsls	r2, r0, #9
    1100:	1affffb6 	bne	fe0 <__aeabi_fmul+0x18c>
    1104:	e133000c 	teq	r3, r12
    1108:	1affffaf 	bne	fcc <__aeabi_fmul+0x178>
    110c:	e1a00001 	mov	r0, r1
    1110:	eaffffb2 	b	fe0 <__aeabi_fmul+0x18c>
    1114:	e133000c 	teq	r3, r12
    1118:	1a000003 	bne	112c <__aeabi_fdiv+0x140>
    111c:	e1b03481 	lsls	r3, r1, #9
    1120:	0affff97 	beq	f84 <__aeabi_fmul+0x130>
    1124:	e1a00001 	mov	r0, r1
    1128:	eaffffac 	b	fe0 <__aeabi_fmul+0x18c>
    112c:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    1130:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    1134:	1affffde 	bne	10b4 <__aeabi_fdiv+0xc8>
    1138:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    113c:	1affffa2 	bne	fcc <__aeabi_fmul+0x178>
    1140:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    1144:	1affff8e 	bne	f84 <__aeabi_fmul+0x130>
    1148:	eaffffa4 	b	fe0 <__aeabi_fmul+0x18c>

0000114c <__aeabi_f2iz>:
    114c:	e1a02080 	lsl	r2, r0, #1
    1150:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    1154:	3a000008 	bcc	117c <__aeabi_f2iz+0x30>
    1158:	e3a0309e 	mov	r3, #158	; 0x9e
    115c:	e0532c22 	subs	r2, r3, r2, lsr #24
    1160:	9a000007 	bls	1184 <__aeabi_f2iz+0x38>
    1164:	e1a03400 	lsl	r3, r0, #8
    1168:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    116c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    1170:	e1a00233 	lsr	r0, r3, r2
    1174:	12600000 	rsbne	r0, r0, #0
    1178:	e12fff1e 	bx	lr
    117c:	e3a00000 	mov	r0, #0
    1180:	e12fff1e 	bx	lr
    1184:	e3720061 	cmn	r2, #97	; 0x61
    1188:	1a000001 	bne	1194 <__aeabi_f2iz+0x48>
    118c:	e1b02480 	lsls	r2, r0, #9
    1190:	1a000002 	bne	11a0 <__aeabi_f2iz+0x54>
    1194:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    1198:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    119c:	e12fff1e 	bx	lr
    11a0:	e3a00000 	mov	r0, #0
    11a4:	e12fff1e 	bx	lr

000011a8 <atexit>:
    11a8:	e1a01000 	mov	r1, r0
    11ac:	e3a00000 	mov	r0, #0
    11b0:	e92d4008 	push	{r3, lr}
    11b4:	e1a02000 	mov	r2, r0
    11b8:	e1a03000 	mov	r3, r0
    11bc:	eb000091 	bl	1408 <__register_exitproc>
    11c0:	e8bd4008 	pop	{r3, lr}
    11c4:	e12fff1e 	bx	lr

000011c8 <exit>:
    11c8:	e92d4008 	push	{r3, lr}
    11cc:	e3a01000 	mov	r1, #0
    11d0:	e1a04000 	mov	r4, r0
    11d4:	eb0000c8 	bl	14fc <__call_exitprocs>
    11d8:	e59f3018 	ldr	r3, [pc, #24]	; 11f8 <exit+0x30>
    11dc:	e5930000 	ldr	r0, [r3]
    11e0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    11e4:	e3530000 	cmp	r3, #0
    11e8:	11a0e00f 	movne	lr, pc
    11ec:	112fff13 	bxne	r3
    11f0:	e1a00004 	mov	r0, r4
    11f4:	eb00014c 	bl	172c <_exit>
    11f8:	0000188c 	.word	0x0000188c

000011fc <memcpy>:
    11fc:	e3520003 	cmp	r2, #3
    1200:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    1204:	8a000009 	bhi	1230 <memcpy+0x34>
    1208:	e3520000 	cmp	r2, #0
    120c:	0a000005 	beq	1228 <memcpy+0x2c>
    1210:	e3a03000 	mov	r3, #0
    1214:	e7d1c003 	ldrb	r12, [r1, r3]
    1218:	e7c0c003 	strb	r12, [r0, r3]
    121c:	e2833001 	add	r3, r3, #1
    1220:	e1530002 	cmp	r3, r2
    1224:	1afffffa 	bne	1214 <memcpy+0x18>
    1228:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    122c:	e12fff1e 	bx	lr
    1230:	e3100003 	tst	r0, #3
    1234:	e0802002 	add	r2, r0, r2
    1238:	0a00000b 	beq	126c <memcpy+0x70>
    123c:	e280c001 	add	r12, r0, #1
    1240:	e2814001 	add	r4, r1, #1
    1244:	e20c3003 	and	r3, r12, #3
    1248:	e5545001 	ldrb	r5, [r4, #-1]
    124c:	e3530000 	cmp	r3, #0
    1250:	e1a01004 	mov	r1, r4
    1254:	e1a0300c 	mov	r3, r12
    1258:	e54c5001 	strb	r5, [r12, #-1]
    125c:	e2844001 	add	r4, r4, #1
    1260:	e28cc001 	add	r12, r12, #1
    1264:	1afffff6 	bne	1244 <memcpy+0x48>
    1268:	ea000000 	b	1270 <memcpy+0x74>
    126c:	e1a03000 	mov	r3, r0
    1270:	e211c003 	ands	r12, r1, #3
    1274:	1a00004f 	bne	13b8 <memcpy+0x1bc>
    1278:	e063c002 	rsb	r12, r3, r2
    127c:	e35c003f 	cmp	r12, #63	; 0x3f
    1280:	da000024 	ble	1318 <memcpy+0x11c>
    1284:	e591c000 	ldr	r12, [r1]
    1288:	e583c000 	str	r12, [r3]
    128c:	e591c004 	ldr	r12, [r1, #4]
    1290:	e583c004 	str	r12, [r3, #4]
    1294:	e591c008 	ldr	r12, [r1, #8]
    1298:	e583c008 	str	r12, [r3, #8]
    129c:	e591c00c 	ldr	r12, [r1, #12]
    12a0:	e583c00c 	str	r12, [r3, #12]
    12a4:	e591c010 	ldr	r12, [r1, #16]
    12a8:	e583c010 	str	r12, [r3, #16]
    12ac:	e591c014 	ldr	r12, [r1, #20]
    12b0:	e583c014 	str	r12, [r3, #20]
    12b4:	e591c018 	ldr	r12, [r1, #24]
    12b8:	e583c018 	str	r12, [r3, #24]
    12bc:	e591c01c 	ldr	r12, [r1, #28]
    12c0:	e583c01c 	str	r12, [r3, #28]
    12c4:	e591c020 	ldr	r12, [r1, #32]
    12c8:	e583c020 	str	r12, [r3, #32]
    12cc:	e591c024 	ldr	r12, [r1, #36]	; 0x24
    12d0:	e583c024 	str	r12, [r3, #36]	; 0x24
    12d4:	e591c028 	ldr	r12, [r1, #40]	; 0x28
    12d8:	e583c028 	str	r12, [r3, #40]	; 0x28
    12dc:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
    12e0:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    12e4:	e591c030 	ldr	r12, [r1, #48]	; 0x30
    12e8:	e583c030 	str	r12, [r3, #48]	; 0x30
    12ec:	e591c034 	ldr	r12, [r1, #52]	; 0x34
    12f0:	e583c034 	str	r12, [r3, #52]	; 0x34
    12f4:	e591c038 	ldr	r12, [r1, #56]	; 0x38
    12f8:	e583c038 	str	r12, [r3, #56]	; 0x38
    12fc:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
    1300:	e2833040 	add	r3, r3, #64	; 0x40
    1304:	e503c004 	str	r12, [r3, #-4]
    1308:	e063c002 	rsb	r12, r3, r2
    130c:	e35c003f 	cmp	r12, #63	; 0x3f
    1310:	e2811040 	add	r1, r1, #64	; 0x40
    1314:	caffffda 	bgt	1284 <memcpy+0x88>
    1318:	e35c000f 	cmp	r12, #15
    131c:	da00000c 	ble	1354 <memcpy+0x158>
    1320:	e591c000 	ldr	r12, [r1]
    1324:	e583c000 	str	r12, [r3]
    1328:	e591c004 	ldr	r12, [r1, #4]
    132c:	e583c004 	str	r12, [r3, #4]
    1330:	e591c008 	ldr	r12, [r1, #8]
    1334:	e583c008 	str	r12, [r3, #8]
    1338:	e591c00c 	ldr	r12, [r1, #12]
    133c:	e2833010 	add	r3, r3, #16
    1340:	e503c004 	str	r12, [r3, #-4]
    1344:	e063c002 	rsb	r12, r3, r2
    1348:	e35c000f 	cmp	r12, #15
    134c:	e2811010 	add	r1, r1, #16
    1350:	cafffff2 	bgt	1320 <memcpy+0x124>
    1354:	e35c0003 	cmp	r12, #3
    1358:	da00000a 	ble	1388 <memcpy+0x18c>
    135c:	e283c004 	add	r12, r3, #4
    1360:	e2814004 	add	r4, r1, #4
    1364:	e06c3002 	rsb	r3, r12, r2
    1368:	e5145004 	ldr	r5, [r4, #-4]
    136c:	e3530003 	cmp	r3, #3
    1370:	e1a01004 	mov	r1, r4
    1374:	e1a0300c 	mov	r3, r12
    1378:	e50c5004 	str	r5, [r12, #-4]
    137c:	e2844004 	add	r4, r4, #4
    1380:	e28cc004 	add	r12, r12, #4
    1384:	cafffff6 	bgt	1364 <memcpy+0x168>
    1388:	e1520003 	cmp	r2, r3
    138c:	82833001 	addhi	r3, r3, #1
    1390:	82811001 	addhi	r1, r1, #1
    1394:	82822001 	addhi	r2, r2, #1
    1398:	9affffa2 	bls	1228 <memcpy+0x2c>
    139c:	e551c001 	ldrb	r12, [r1, #-1]
    13a0:	e2833001 	add	r3, r3, #1
    13a4:	e1530002 	cmp	r3, r2
    13a8:	e543c002 	strb	r12, [r3, #-2]
    13ac:	e2811001 	add	r1, r1, #1
    13b0:	1afffff9 	bne	139c <memcpy+0x1a0>
    13b4:	eaffff9b 	b	1228 <memcpy+0x2c>
    13b8:	e0635002 	rsb	r5, r3, r2
    13bc:	e06c4001 	rsb	r4, r12, r1
    13c0:	e3550003 	cmp	r5, #3
    13c4:	e5945000 	ldr	r5, [r4]
    13c8:	daffffee 	ble	1388 <memcpy+0x18c>
    13cc:	e26c6004 	rsb	r6, r12, #4
    13d0:	e1a0718c 	lsl	r7, r12, #3
    13d4:	e1a06186 	lsl	r6, r6, #3
    13d8:	e283c004 	add	r12, r3, #4
    13dc:	e1a08735 	lsr	r8, r5, r7
    13e0:	e5b45004 	ldr	r5, [r4, #4]!
    13e4:	e1888615 	orr	r8, r8, r5, lsl r6
    13e8:	e06c3002 	rsb	r3, r12, r2
    13ec:	e3530003 	cmp	r3, #3
    13f0:	e50c8004 	str	r8, [r12, #-4]
    13f4:	e1a0300c 	mov	r3, r12
    13f8:	e2811004 	add	r1, r1, #4
    13fc:	e28cc004 	add	r12, r12, #4
    1400:	cafffff5 	bgt	13dc <memcpy+0x1e0>
    1404:	eaffffdf 	b	1388 <memcpy+0x18c>

00001408 <__register_exitproc>:
    1408:	e59fc0e4 	ldr	r12, [pc, #228]	; 14f4 <__register_exitproc+0xec>
    140c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1410:	e59c4000 	ldr	r4, [r12]
    1414:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1418:	e35c0000 	cmp	r12, #0
    141c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1420:	e59c5004 	ldr	r5, [r12, #4]
    1424:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1428:	e355001f 	cmp	r5, #31
    142c:	e24dd010 	sub	sp, sp, #16
    1430:	e1a06000 	mov	r6, r0
    1434:	da000015 	ble	1490 <__register_exitproc+0x88>
    1438:	e59f00b8 	ldr	r0, [pc, #184]	; 14f8 <__register_exitproc+0xf0>
    143c:	e3500000 	cmp	r0, #0
    1440:	1a000001 	bne	144c <__register_exitproc+0x44>
    1444:	e3e00000 	mvn	r0, #0
    1448:	ea000018 	b	14b0 <__register_exitproc+0xa8>
    144c:	e3a00e19 	mov	r0, #400	; 0x190
    1450:	e58d100c 	str	r1, [sp, #12]
    1454:	e58d2008 	str	r2, [sp, #8]
    1458:	e58d3004 	str	r3, [sp, #4]
    145c:	e320f000 	nop	{0}
    1460:	e250c000 	subs	r12, r0, #0
    1464:	e59d100c 	ldr	r1, [sp, #12]
    1468:	e59d2008 	ldr	r2, [sp, #8]
    146c:	e59d3004 	ldr	r3, [sp, #4]
    1470:	0afffff3 	beq	1444 <__register_exitproc+0x3c>
    1474:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1478:	e3a00000 	mov	r0, #0
    147c:	e58c0004 	str	r0, [r12, #4]
    1480:	e58c5000 	str	r5, [r12]
    1484:	e584c148 	str	r12, [r4, #328]	; 0x148
    1488:	e58c0188 	str	r0, [r12, #392]	; 0x188
    148c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1490:	e3560000 	cmp	r6, #0
    1494:	e59c4004 	ldr	r4, [r12, #4]
    1498:	1a000007 	bne	14bc <__register_exitproc+0xb4>
    149c:	e2843002 	add	r3, r4, #2
    14a0:	e2844001 	add	r4, r4, #1
    14a4:	e78c1103 	str	r1, [r12, r3, lsl #2]
    14a8:	e58c4004 	str	r4, [r12, #4]
    14ac:	e3a00000 	mov	r0, #0
    14b0:	e28dd010 	add	sp, sp, #16
    14b4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    14b8:	e12fff1e 	bx	lr
    14bc:	e3a00001 	mov	r0, #1
    14c0:	e1a00410 	lsl	r0, r0, r4
    14c4:	e08c8104 	add	r8, r12, r4, lsl #2
    14c8:	e3560002 	cmp	r6, #2
    14cc:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    14d0:	e5883108 	str	r3, [r8, #264]	; 0x108
    14d4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    14d8:	e1877000 	orr	r7, r7, r0
    14dc:	01830000 	orreq	r0, r3, r0
    14e0:	e1a05008 	mov	r5, r8
    14e4:	e5882088 	str	r2, [r8, #136]	; 0x88
    14e8:	e58c7188 	str	r7, [r12, #392]	; 0x188
    14ec:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    14f0:	eaffffe9 	b	149c <__register_exitproc+0x94>
    14f4:	0000188c 	.word	0x0000188c
    14f8:	00000000 	.word	0x00000000

000014fc <__call_exitprocs>:
    14fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1500:	e59f3168 	ldr	r3, [pc, #360]	; 1670 <__call_exitprocs+0x174>
    1504:	e5933000 	ldr	r3, [r3]
    1508:	e24dd014 	sub	sp, sp, #20
    150c:	e58d3004 	str	r3, [sp, #4]
    1510:	e2833f52 	add	r3, r3, #328	; 0x148
    1514:	e58d0008 	str	r0, [sp, #8]
    1518:	e58d300c 	str	r3, [sp, #12]
    151c:	e1a07001 	mov	r7, r1
    1520:	e3a08001 	mov	r8, #1
    1524:	e59d3004 	ldr	r3, [sp, #4]
    1528:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    152c:	e3560000 	cmp	r6, #0
    1530:	e59db00c 	ldr	r11, [sp, #12]
    1534:	0a000033 	beq	1608 <__call_exitprocs+0x10c>
    1538:	e5965004 	ldr	r5, [r6, #4]
    153c:	e2554001 	subs	r4, r5, #1
    1540:	5286a088 	addpl	r10, r6, #136	; 0x88
    1544:	5285501f 	addpl	r5, r5, #31
    1548:	508a5105 	addpl	r5, r10, r5, lsl #2
    154c:	5a000007 	bpl	1570 <__call_exitprocs+0x74>
    1550:	ea000029 	b	15fc <__call_exitprocs+0x100>
    1554:	e5953000 	ldr	r3, [r5]
    1558:	e1530007 	cmp	r3, r7
    155c:	0a000005 	beq	1578 <__call_exitprocs+0x7c>
    1560:	e2444001 	sub	r4, r4, #1
    1564:	e3740001 	cmn	r4, #1
    1568:	e2455004 	sub	r5, r5, #4
    156c:	0a000022 	beq	15fc <__call_exitprocs+0x100>
    1570:	e3570000 	cmp	r7, #0
    1574:	1afffff6 	bne	1554 <__call_exitprocs+0x58>
    1578:	e5963004 	ldr	r3, [r6, #4]
    157c:	e06a2005 	rsb	r2, r10, r5
    1580:	e2433001 	sub	r3, r3, #1
    1584:	e0862002 	add	r2, r6, r2
    1588:	e1530004 	cmp	r3, r4
    158c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1590:	13a01000 	movne	r1, #0
    1594:	05864004 	streq	r4, [r6, #4]
    1598:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    159c:	e3530000 	cmp	r3, #0
    15a0:	0affffee 	beq	1560 <__call_exitprocs+0x64>
    15a4:	e1a02418 	lsl	r2, r8, r4
    15a8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    15ac:	e1120001 	tst	r2, r1
    15b0:	e5969004 	ldr	r9, [r6, #4]
    15b4:	0a000016 	beq	1614 <__call_exitprocs+0x118>
    15b8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    15bc:	e1120001 	tst	r2, r1
    15c0:	1a000016 	bne	1620 <__call_exitprocs+0x124>
    15c4:	e59d0008 	ldr	r0, [sp, #8]
    15c8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    15cc:	e1a0e00f 	mov	lr, pc
    15d0:	e12fff13 	bx	r3
    15d4:	e5963004 	ldr	r3, [r6, #4]
    15d8:	e1530009 	cmp	r3, r9
    15dc:	1affffd0 	bne	1524 <__call_exitprocs+0x28>
    15e0:	e59b3000 	ldr	r3, [r11]
    15e4:	e1530006 	cmp	r3, r6
    15e8:	1affffcd 	bne	1524 <__call_exitprocs+0x28>
    15ec:	e2444001 	sub	r4, r4, #1
    15f0:	e3740001 	cmn	r4, #1
    15f4:	e2455004 	sub	r5, r5, #4
    15f8:	1affffdc 	bne	1570 <__call_exitprocs+0x74>
    15fc:	e59f1070 	ldr	r1, [pc, #112]	; 1674 <__call_exitprocs+0x178>
    1600:	e3510000 	cmp	r1, #0
    1604:	1a000009 	bne	1630 <__call_exitprocs+0x134>
    1608:	e28dd014 	add	sp, sp, #20
    160c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1610:	e12fff1e 	bx	lr
    1614:	e1a0e00f 	mov	lr, pc
    1618:	e12fff13 	bx	r3
    161c:	eaffffec 	b	15d4 <__call_exitprocs+0xd8>
    1620:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1624:	e1a0e00f 	mov	lr, pc
    1628:	e12fff13 	bx	r3
    162c:	eaffffe8 	b	15d4 <__call_exitprocs+0xd8>
    1630:	e5963004 	ldr	r3, [r6, #4]
    1634:	e3530000 	cmp	r3, #0
    1638:	e5963000 	ldr	r3, [r6]
    163c:	1a000008 	bne	1664 <__call_exitprocs+0x168>
    1640:	e3530000 	cmp	r3, #0
    1644:	0a000006 	beq	1664 <__call_exitprocs+0x168>
    1648:	e1a00006 	mov	r0, r6
    164c:	e58b3000 	str	r3, [r11]
    1650:	e320f000 	nop	{0}
    1654:	e59b6000 	ldr	r6, [r11]
    1658:	e3560000 	cmp	r6, #0
    165c:	1affffb5 	bne	1538 <__call_exitprocs+0x3c>
    1660:	eaffffe8 	b	1608 <__call_exitprocs+0x10c>
    1664:	e1a0b006 	mov	r11, r6
    1668:	e1a06003 	mov	r6, r3
    166c:	eafffff9 	b	1658 <__call_exitprocs+0x15c>
    1670:	0000188c 	.word	0x0000188c
    1674:	00000000 	.word	0x00000000

00001678 <register_fini>:
    1678:	e92d4008 	push	{r3, lr}
    167c:	e59f3010 	ldr	r3, [pc, #16]	; 1694 <register_fini+0x1c>
    1680:	e3530000 	cmp	r3, #0
    1684:	159f000c 	ldrne	r0, [pc, #12]	; 1698 <register_fini+0x20>
    1688:	1bfffec6 	blne	11a8 <atexit>
    168c:	e8bd4008 	pop	{r3, lr}
    1690:	e12fff1e 	bx	lr
    1694:	000018b4 	.word	0x000018b4
    1698:	0000169c 	.word	0x0000169c

0000169c <__libc_fini_array>:
    169c:	e92d4038 	push	{r3, r4, r5, lr}
    16a0:	e59f5030 	ldr	r5, [pc, #48]	; 16d8 <__libc_fini_array+0x3c>
    16a4:	e59f4030 	ldr	r4, [pc, #48]	; 16dc <__libc_fini_array+0x40>
    16a8:	e0654004 	rsb	r4, r5, r4
    16ac:	e1b04144 	asrs	r4, r4, #2
    16b0:	10855104 	addne	r5, r5, r4, lsl #2
    16b4:	0a000004 	beq	16cc <__libc_fini_array+0x30>
    16b8:	e5353004 	ldr	r3, [r5, #-4]!
    16bc:	e1a0e00f 	mov	lr, pc
    16c0:	e12fff13 	bx	r3
    16c4:	e2544001 	subs	r4, r4, #1
    16c8:	1afffffa 	bne	16b8 <__libc_fini_array+0x1c>
    16cc:	eb000078 	bl	18b4 <__libc_fini>
    16d0:	e8bd4038 	pop	{r3, r4, r5, lr}
    16d4:	e12fff1e 	bx	lr
    16d8:	000018cc 	.word	0x000018cc
    16dc:	000018d0 	.word	0x000018d0

000016e0 <__cs3_premain>:
    16e0:	e92d4008 	push	{r3, lr}
    16e4:	eb00001d 	bl	1760 <__libc_init_array>
    16e8:	e59f3030 	ldr	r3, [pc, #48]	; 1720 <__cs3_premain+0x40>
    16ec:	e3530000 	cmp	r3, #0
    16f0:	15930000 	ldrne	r0, [r3]
    16f4:	01a00003 	moveq	r0, r3
    16f8:	e59f3024 	ldr	r3, [pc, #36]	; 1724 <__cs3_premain+0x44>
    16fc:	e3530000 	cmp	r3, #0
    1700:	15931000 	ldrne	r1, [r3]
    1704:	01a01003 	moveq	r1, r3
    1708:	e3a02000 	mov	r2, #0
    170c:	ebfffc31 	bl	7d8 <main>
    1710:	e59f3010 	ldr	r3, [pc, #16]	; 1728 <__cs3_premain+0x48>
    1714:	e3530000 	cmp	r3, #0
    1718:	1bfffeaa 	blne	11c8 <exit>
    171c:	eafffffe 	b	171c <__cs3_premain+0x3c>
	...
    1728:	000011c8 	.word	0x000011c8

0000172c <_exit>:
    172c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1730:	e3a00018 	mov	r0, #24
    1734:	e59f1004 	ldr	r1, [pc, #4]	; 1740 <_exit+0x14>
    1738:	ef123456 	svc	0x00123456
    173c:	eafffffe 	b	173c <_exit+0x10>
    1740:	00020026 	.word	0x00020026

00001744 <__cs3_isr_interrupt>:
    1744:	eafffffe 	b	1744 <__cs3_isr_interrupt>

00001748 <__cs3_isr_undef>:
    1748:	eafffffe 	b	1748 <__cs3_isr_undef>

0000174c <__cs3_isr_swi>:
    174c:	eafffffe 	b	174c <__cs3_isr_swi>

00001750 <__cs3_isr_pabort>:
    1750:	eafffffe 	b	1750 <__cs3_isr_pabort>

00001754 <__cs3_isr_dabort>:
    1754:	eafffffe 	b	1754 <__cs3_isr_dabort>

00001758 <__cs3_isr_irq>:
    1758:	eafffffe 	b	1758 <__cs3_isr_irq>

0000175c <__cs3_isr_fiq>:
    175c:	eafffffe 	b	175c <__cs3_isr_fiq>

00001760 <__libc_init_array>:
    1760:	e92d4070 	push	{r4, r5, r6, lr}
    1764:	e59f506c 	ldr	r5, [pc, #108]	; 17d8 <__libc_init_array+0x78>
    1768:	e59f606c 	ldr	r6, [pc, #108]	; 17dc <__libc_init_array+0x7c>
    176c:	e0656006 	rsb	r6, r5, r6
    1770:	e1b06146 	asrs	r6, r6, #2
    1774:	12455004 	subne	r5, r5, #4
    1778:	13a04000 	movne	r4, #0
    177c:	0a000005 	beq	1798 <__libc_init_array+0x38>
    1780:	e5b53004 	ldr	r3, [r5, #4]!
    1784:	e2844001 	add	r4, r4, #1
    1788:	e1a0e00f 	mov	lr, pc
    178c:	e12fff13 	bx	r3
    1790:	e1560004 	cmp	r6, r4
    1794:	1afffff9 	bne	1780 <__libc_init_array+0x20>
    1798:	e59f5040 	ldr	r5, [pc, #64]	; 17e0 <__libc_init_array+0x80>
    179c:	e59f6040 	ldr	r6, [pc, #64]	; 17e4 <__libc_init_array+0x84>
    17a0:	e0656006 	rsb	r6, r5, r6
    17a4:	eb00003a 	bl	1894 <_init>
    17a8:	e1b06146 	asrs	r6, r6, #2
    17ac:	12455004 	subne	r5, r5, #4
    17b0:	13a04000 	movne	r4, #0
    17b4:	0a000005 	beq	17d0 <__libc_init_array+0x70>
    17b8:	e5b53004 	ldr	r3, [r5, #4]!
    17bc:	e2844001 	add	r4, r4, #1
    17c0:	e1a0e00f 	mov	lr, pc
    17c4:	e12fff13 	bx	r3
    17c8:	e1560004 	cmp	r6, r4
    17cc:	1afffff9 	bne	17b8 <__libc_init_array+0x58>
    17d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    17d4:	e12fff1e 	bx	lr
    17d8:	000018ac 	.word	0x000018ac
    17dc:	000018ac 	.word	0x000018ac
    17e0:	000018ac 	.word	0x000018ac
    17e4:	000018b4 	.word	0x000018b4

Disassembly of section .rodata:

000017ec <_global_impure_ptr-0xa0>:
    17ec:	0000a5d0 	.word	0x0000a5d0
    17f0:	00009990 	.word	0x00009990
    17f4:	00008d50 	.word	0x00008d50
    17f8:	00008110 	.word	0x00008110
    17fc:	000074d0 	.word	0x000074d0
    1800:	00006890 	.word	0x00006890
    1804:	00005c50 	.word	0x00005c50
    1808:	00005010 	.word	0x00005010
    180c:	000043d0 	.word	0x000043d0
    1810:	00003790 	.word	0x00003790
    1814:	000000bf 	.word	0x000000bf
    1818:	00000086 	.word	0x00000086
    181c:	000000db 	.word	0x000000db
    1820:	000000cf 	.word	0x000000cf
    1824:	000000e6 	.word	0x000000e6
    1828:	000000ed 	.word	0x000000ed
    182c:	000000fd 	.word	0x000000fd
    1830:	00000087 	.word	0x00000087
    1834:	000000ff 	.word	0x000000ff
    1838:	000000ef 	.word	0x000000ef
    183c:	000000f7 	.word	0x000000f7
    1840:	000000fc 	.word	0x000000fc
    1844:	000000b9 	.word	0x000000b9
    1848:	000000de 	.word	0x000000de
    184c:	000000f9 	.word	0x000000f9
    1850:	000000f1 	.word	0x000000f1
    1854:	00000000 	.word	0x00000000
    1858:	414e5355 	.word	0x414e5355
    185c:	34434520 	.word	0x34434520
    1860:	4d203336 	.word	0x4d203336
    1864:	4f524349 	.word	0x4f524349
    1868:	504d4f43 	.word	0x504d4f43
    186c:	52455455 	.word	0x52455455
    1870:	544e4920 	.word	0x544e4920
    1874:	41465245 	.word	0x41465245
    1878:	474e4943 	.word	0x474e4943
    187c:	4e494620 	.word	0x4e494620
    1880:	50204c41 	.word	0x50204c41
    1884:	454a4f52 	.word	0x454a4f52
    1888:	00005443 	.word	0x00005443

0000188c <_global_impure_ptr>:
    188c:	0000b218 00000043                       ....C...

00001894 <_init>:
    1894:	e1a0c00d 	mov	r12, sp
    1898:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    189c:	e24cb004 	sub	r11, r12, #4
    18a0:	e24bd028 	sub	sp, r11, #40	; 0x28
    18a4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    18a8:	e12fff1e 	bx	lr

000018ac <__init_array_start>:
    18ac:	00001678 	.word	0x00001678

000018b0 <__frame_dummy_init_array_entry>:
    18b0:	00000208                                ....

000018b4 <__libc_fini>:
    18b4:	e1a0c00d 	mov	r12, sp
    18b8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    18bc:	e24cb004 	sub	r11, r12, #4
    18c0:	e24bd028 	sub	sp, r11, #40	; 0x28
    18c4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    18c8:	e12fff1e 	bx	lr

000018cc <__fini_array_start>:
    18cc:	000001c4 	.word	0x000001c4

000018d0 <__cs3_regions>:
	...
    18dc:	0000b648 	.word	0x0000b648
    18e0:	00000020 	.word	0x00000020

000018e4 <__cs3_regions_end>:
    18e4:	00000000 	.word	0x00000000
